##############################
## TP Prisoner scripted_effects
##############################

take_prisoner = {
	$PRISONER$ = {
	#if = {
	#	limit = { has_character_flag = under_offer_as_prisoner_flag	} 
	#	## MEMORY HERE
	#	#
	#	#
	#
	#	}
	release_from_prison = yes
	}
	imprison = {
		target = $PRISONER$
		type = house_arrest
	}
}

home_court_depart_effect = {
	if = {
		limit = { 
			is_imprisoned = no
			NOT = { location = liege.capital_province } 
		}
		start_travel_plan = {
			players_use_planner = no
			destination = liege.capital_province
			return_trip = no
		}
	}
}

# Defining new scope variables under $SENDER$
## prisoner_bodyguard_travelling_to_recipient = prisoner_from_sender
# Defining new scope variables for $PRISONER$ 
## prisoner_travelling_to_recipient = bodyguard_from_sender
## prisoner_old_imprisoner = $SENDER$
## prisoner_new_imprisoner = $RECIEVER$
prisoner_depart_effect = {
	$PRISONER$ = { save_scope_as = prisoner_from_sender }
	$RECIEVER$ = { save_scope_as = reciever }
	$SENDER$ = { save_scope_as = sender }

	scope:sender = {
		if = {
			limit = { employs_court_position = bodyguard_court_position }
			every_court_position_holder = {
				type = bodyguard_court_position
				limit = { 
					NOT = { exists = bodyguard_from_sender }
					is_available = yes
				}
				save_scope_as = bodyguard_from_sender
			}
		}
	}

	scope:bodyguard_from_sender ?= {
		set_variable = {
			name = prisoner_travelling_to_recipient
			value = scope:prisoner_from_sender
		}
	}

	scope:prisoner_from_sender = {
		hidden_effect = {

		}

		show_as_tooltip = {
			
		}

		# notification toast

		set_variable = {
			name = prisoner_old_imprisoner
			value = scope:sender
		}

		set_variable = {
			name = prisoner_new_imprisoner
			value = scope:reciever
		}

		set_variable = {
			name = prisoner_bodyguard_travelling_to_recipient
			value = scope:bodyguard_from_sender
		}

		# After every variables are set, the prisoner then travels to their recipient
		start_travel_plan = {
			players_use_planner = no
			destination = scope:reciever.capital_province
			companion = scope:bodyguard_from_sender
			on_start_on_action = on_prisoner_depart_for_recipient
			on_travel_planner_cancel_on_action = on_prisoner_depart_travel_planner_exit
			on_arrival_on_action = on_prisoner_arrive_at_recipient
			on_arrival_destinations = last
			return_trip = no
		}

		# TRIGGERS FOR POTENTIALLY MANIPULATING PRESTIGE/REKNOWN/PIETY HERE
		#
		#
		#
	}
}

prisoner_travel_invalidation_effect = {
	prisoner_remove_variables_effect = yes
}

prisoner_remove_variables_effect = {
	if = {
		limit = { has_character_flag = under_offer_as_prisoner_flag }
		remove_character_flag = under_offer_as_prisoner_flag
	}

	# Remove the assigned travel bodyguard_from_sender
	var:prisoner_bodyguard_travelling_to_recipient ?= {
		if = {
			limit = { exists = prisoner_travelling_to_recipient }
			remove_variable = prisoner_travelling_to_recipient
		}
	}

	if = {
		limit = { exists = prisoner_bodyguard_travelling_to_recipient }
		remove_variable = prisoner_bodyguard_travelling_to_recipient
	}

	# Remove other variables assigned during prisoner_depart_effect
	if = {
		limit = { exists = prisoner_old_imprisoner }
		remove_variable = prisoner_old_imprisoner
	}

	if = {
		limit = { exists = prisoner_new_imprisoner }
		remove_variable = prisoner_new_imprisoner
	}

	# Removes any invalidation reason
	if = {
		limit = { exists = invalidation_reason }
		remove_variable = invalidation_reason
	}
}
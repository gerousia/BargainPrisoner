##############################
## GM1 scripted_effects
##############################
#------------------------------
# interaction-related
#------------------------------

# PRISONER (character)
# SENDER (character)
# RECEIVER (character)
transfer_prisoner_interaction_effect = {
	$PRISONER$ = {
		if = {
			limit = { has_character_flag = under_transfer_prisoner_interaction }
			remove_character_flag = under_transfer_prisoner_interaction
		}

		change_imprisoner_character_effect = { 
			TARGET = this
			OLD_IMPRISONER = $SENDER$
			NEW_IMPRISONER = $RECEIVER$
		}
		transfer_prisoner_interaction_escalates_rivalry_effect = {
			OLD_IMPRISONER = $SENDER$
			NEW_IMPRISONER = $RECEIVER$
			PRISONER = this
		}
	}
	
	$SENDER$ = {
		transfer_prisoner_interaction_dread_effect = { 
			TARGET = this
			PRISONER = $PRISONER$
		}
		transfer_prisoner_interaction_stress_effect = { 
			TARGET = this
			PRISONER = $PRISONER$
		}
		transfer_prisoner_interaction_scheme_effect = {
			TARGET = this
			PRISONER = $PRISONER$
		}

		if = {
			limit = { is_vassal_of = $RECEIVER$ }
			if = {
				limit = { scope:hook ?= yes }
				$RECEIVER$ = { use_hook = prev }
			}
			else = {
				add_opinion = {
					target = $RECEIVER$
					modifier = demanded_transfer_prisoner
				}
			}
		}
	}

	$RECEIVER$ = {
		transfer_prisoner_interaction_dread_effect = { 
			TARGET = this
			PRISONER = $PRISONER$
		}
		transfer_prisoner_interaction_stress_effect = { 
			TARGET = this
			PRISONER = $PRISONER$
		}
		transfer_prisoner_interaction_scheme_effect = {
			TARGET = this
			PRISONER = $PRISONER$
		}
	}
}


# based on ./common/scripted_effects/00_prison_effects.txt/imprison_attempt_escalates_rivalry_effect
## OLD_IMPRISONER(character)
## NEW_IMPRISONER (character)
## PRISONER (character)
transfer_prisoner_interaction_escalates_rivalry_effect = {
	$PRISONER$ = {
		if = {
			limit = {
				NOT = { has_relation_rival = $OLD_IMPRISONER$ }
				OR = {
					$NEW_IMPRISONER$ = { is_at_war_with = $PRISONER$ }
					has_requested_excommunication_by = { WHO = $OLD_IMPRISONER$ }
					has_opinion_modifier = {
						modifier = revoked_title
						target = $OLD_IMPRISONER$
					}
				}
			}
			hidden_effect = {
				if = {
					limit = { has_relation_potential_rival = $OLD_IMPRISONER$ }
					remove_relation_potential_rival = $OLD_IMPRISONER$
				}
			}
			set_relation_rival = $OLD_IMPRISONER$
		}
		else = {
			hidden_effect = {
				progress_towards_rival_effect = {
					CHARACTER = $OLD_IMPRISONER$
					REASON = rival_imprisoned
					OPINION = 0
				}
			}
		}
	}
}

# based on ./common/character_interactions/00_prison_interactions.txt/imprison_interaction
## TARGET (character)
## PRISONER (character)
transfer_prisoner_interaction_stress_effect = {
	 $TARGET$ = {
		if = {
			limit = { 
				has_imprisonment_reason = $PRISONER$ 
			}
			stress_impact = {
				compassionate = minor_stress_impact_gain
				forgiving = minor_stress_impact_gain
			}
		}
		else = {
			stress_impact = {
				just = medium_stress_impact_gain
				compassionate = medium_stress_impact_gain
			}
		}
	}
}

# based on ./common/scripted_effects/00_interaction_effects.txt/illegal_imprisonment_dread_effect
## TARGET (character)
## PRISONER (character)
transfer_prisoner_interaction_dread_effect = {
	$TARGET$ = {
		if = {
			limit = { 
				NOT = { has_imprisonment_reason = $PRISONER$ } 
			}
			if = {
				limit = {
					$PRISONER$ = {
						OR = {
							is_spouse_of = $TARGET$
							is_close_family_of = $TARGET$
							tier_or_related_liege_tier_greater_or_equal_trigger = { TIER = tier_kingdom }
						}
					}
				}
				add_dread = medium_dread_gain
			}
			else_if = {
				limit = {
					$PRISONER$ = {
						OR = {
							tier_or_related_liege_tier_equal_trigger = { TIER = tier_duchy }
							tier_or_related_liege_tier_equal_trigger = { TIER = tier_county }
						}
					}
				}
				add_dread = minor_dread_gain
			}
		}
	}
}

# based on ./common/character_interactions/00_prison_interactions.txt/imprison_interaction
## TARGET (character)
## PRISONER (character)
transfer_prisoner_interaction_scheme_effect = {
	hidden_effect = {
		$TARGET$ = {
			if = {
				limit = { any_scheme = { scheme_target = $PRISONER$ } }
				every_scheme = {
					limit = { scheme_target = $PRISONER$ }
					end_scheme = yes
				}
			}
		}
	}
}

# PRISONER (character)
# SENDER (character)
# RECEIVER (character)
transfer_prisoner_interaction_payment_effect = {
	switch = {
		trigger = always
		scope:very_high_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = $PRISONER$.highly_increased_barter_cost_value
			}
		}
		scope:high_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = $PRISONER$.increased_barter_cost_value
			}
		}
		scope:medium_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = $PRISONER$.slightly_increased_barter_cost_value
			}
		}
		scope:gold = {
			save_scope_value_as = {
				name = gold_amount
				value = $PRISONER$.barter_cost_value
			}
		}
		scope:very_high_current_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = $RECEIVER$.gold
			}
		}
		scope:high_current_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = $RECEIVER$.gold
			}
		}
		scope:medium_current_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = $RECEIVER$.gold
			}
		}
		scope:current_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = $RECEIVER$.gold
			}
		}
	}

	if = {
		limit = { exists = scope:gold_amount }
		$RECEIVER$ = {
			pay_short_term_gold = {
				gold = scope:gold_amount
				target = $SENDER$
			}
		}
		if = {
			limit = { $SENDER$.dynasty ?= { has_dynasty_perk = fp1_pillage_legacy_3 } }
			$SENDER$ = {
				add_prestige = scope:gold_amount
			}
		}
	}

	switch = {
		trigger = always
		scope:strong_hook = {
			$SENDER$ = {
				add_hook = {
					target = $RECEIVER$
					type = loyalty_hook
				}
			}
		}
		scope:favor = {
			$SENDER$ = {
				add_hook = {
					target = $RECEIVER$
					type = favor_hook
				}
			}
		}
	}

	if = {
		limit = { debug_only = yes }
		debug_log_date = yes
		debug_log_scopes = yes
	}
}

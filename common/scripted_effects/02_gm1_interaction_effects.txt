##############################
## GM1 scripted_effects
##############################
#------------------------------
# interaction-related
#------------------------------

### To the author at PDX who wrote this original line, 
### "- there is no god nor consistency when it comes to localization.", 
### You're goddamn right.
	
# based on ./common/scripted_effects/05_dlc_bp2_effects.txt/take_hostage
## RECEIVER (character)
## PRISONER (character)
receive_prisoner = {
	custom_description = {
		text = "receive_prisoner_tooltip_effect"
		subject = $RECEIVER$
		object = $PRISONER$
	}
}

# based on ./common/character_interactions/00_prison_interactions.txt/imprison_interaction
## CHARACTER (character)
## TARGET (character)
disband_all_schemes_effect = {
	hidden_effect = {
		$CHARACTER$ = {
			if = {
				limit = { any_scheme = { scheme_target = $TARGET$ } }
				every_scheme = {
					limit = { scheme_target = $TARGET$ }
					end_scheme = yes
				}
			}
		}
	}
}

# PRISONER (character)
# SENDER (character)
# RECEIVER (character)
transfer_prisoner_interaction_effect = {
	$PRISONER$ = { save_scope_as = prisoner }
	$SENDER$ = { save_scope_as = sender }
	$RECEIVER$ = { save_scope_as = receiver }

	switch = {
		trigger = always
		scope:very_high_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = scope:prisoner.highly_increased_barter_cost_value
			}
		}
		scope:high_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = scope:prisoner.increased_barter_cost_value
			}
		}
		scope:medium_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = scope:prisoner.slightly_increased_barter_cost_value
			}
		}
		scope:gold = {
			save_scope_value_as = {
				name = gold_amount
				value = scope:prisoner.barter_cost_value
			}
		}
		scope:very_high_current_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = scope:receiver.gold
			}
		}
		scope:high_current_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = scope:receiver.gold
			}
		}
		scope:medium_current_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = scope:receiver.gold
			}
		}
		scope:current_gold = {
			save_scope_value_as = {
				name = gold_amount
				value = scope:receiver.gold
			}
		}
	}

	scope:prisoner = {
		change_imprisoner_character_effect = { 
			PRISONER = this
			OLD_IMPRISONER = scope:sender
			NEW_IMPRISONER = scope:receiver
		}

		## PENALTIES
		## Disabled with 'none penalties' game rule on. Player Only.
		if = {
			limit = {
				NAND = {
					OR = {
						scope:sender = { is_ai = no }
						scope:receiver = { is_ai = no }
					}
					has_game_rule = transfer_prisoner_disabled_interaction_penalties
				}
			}
			transfer_prisoner_interaction_escalates_rivalry_effect = {
				TARGET = this
				OLD_IMPRISONER = scope:sender
				NEW_IMPRISONER = scope:receiver
			}
		}

		## NOTIFICATION
		trigger_event = gm1_interaction.0001
	}
	
	scope:sender = {
		disband_all_schemes_effect = {
			CHARACTER = this
			TARGET = scope:prisoner
		}
		
		## PENALTIES
		## Disabled with 'none penalties' game rule on.
		if = {
			limit = { 
				NAND = {
					OR = {
						scope:sender = { is_ai = no }
						scope:receiver = { is_ai = no }
					}
					has_game_rule = transfer_prisoner_disabled_interaction_penalties
				}
			}
			transfer_prisoner_interaction_dread_effect = { 
				CHARACTER = this
				TARGET = scope:prisoner
			}
			transfer_prisoner_interaction_stress_effect = { 
				CHARACTER = this
				TARGET = scope:prisoner
			}
			## SPECIAL DEMAND CASE
			## Direct Vassals are forced to accept with 'default accept'. Player Only.
			if = {
				limit = {
					is_vassal_of = scope:receiver
					exists = scope:hook
					scope:receiver = { is_ai = no }
					has_game_rule = transfer_prisoner_default_interaction_acceptance
				}
				## No penalties received when a 'hook' is used-
				## Or sender has imprisonment reason against their vassal.
				if = {
					limit = { scope:hook ?= no }
					if = {
						limit = { 
							scope:prisoner = { is_vassal_of = prev }
							NOT = { has_imprisonment_reason = scope:prisoner }
						}
						add_opinion = {
							target = scope:receiver
							modifier = demanded_transfer_prisoner
							opinion = -30
						}
					}
					else = {
						add_opinion = {
							target = scope:receiver
							modifier = demanded_transfer_prisoner
						}
					}
				}
			}
		}

		## NOTIFICATION
		trigger_event = gm1_interaction.0002
	}

	scope:receiver = {
		disband_all_schemes_effect = {
			CHARACTER = this
			TARGET = scope:prisoner
		}

		## PENALTIES
		## Disabled with 'none penalties' game rule on. Player Only.
		if = {
			limit = {
				NAND = {
					OR = {
						scope:sender = { is_ai = no }
						scope:receiver = { is_ai = no }
					}
					has_game_rule = transfer_prisoner_disabled_interaction_penalties
				}
			}
			transfer_prisoner_interaction_dread_effect = { 
				CHARACTER = this
				TARGET = scope:prisoner
			}
			transfer_prisoner_interaction_stress_effect = { 
				CHARACTER = this
				TARGET = scope:prisoner
			}
			## SPECIAL DEMAND CASE
			if = {
				limit = { 
					scope:prisoner.liege = this
					exists = scope:illegal_imprisonment
				}
				transfer_prisoner_start_faction_war_if_valid = {
					IMPRISONER = this
					PRISONER = scope:prisoner
				}
			}
		}

		## NOTIFICATION
		trigger_event = gm1_interaction.0003
	}

	transfer_prisoner_interaction_payment_effect = {
		SENDER = scope:sender
		RECEIVER = scope:receiver
	}

	if = {
		limit = { debug_only = yes }
		debug_log_date = yes
		debug_log_scopes = yes
	}
}


# based on ./common/scripted_effects/00_prison_effects.txt/imprison_attempt_escalates_rivalry_effect
## OLD_IMPRISONER (character)
## NEW_IMPRISONER (character)
## TARGET (character)
transfer_prisoner_interaction_escalates_rivalry_effect = {
	$OLD_IMPRISONER$ = { save_temporary_scope_as = old_imprisoner }
	$NEW_IMPRISONER$ = { save_temporary_scope_as = new_imprisoner }
	$TARGET$ = { save_temporary_scope_as = imprisonment_target }

	scope:old_imprisoner = {
		if = {
			limit = {
				scope:imprisonment_target = {
					NOT = { has_relation_rival = prev }
					OR = {
						has_opinion_modifier = {
							target = scope:old_imprisoner
							modifier = revoked_title
						}
						has_requested_excommunication = { 
							CHARACTER = scope:new_imprisoner 
						}
						is_at_war_with = scope:new_imprisoner
					}
				}
			}
			hidden_effect = {
				if = {
					limit = { has_relation_potential_rival = scope:old_imprisoner }
					remove_relation_potential_rival = scope:old_imprisoner
				}
			}
			set_relation_rival = scope:imprisonment_target
		}
		else = {
			hidden_effect = {
				progress_towards_rival_effect = {
					CHARACTER = scope:imprisonment_target
					REASON = rival_imprisoned
					OPINION = 0
				}
			}
		}
	}
}

# based on ./common/character_interactions/00_prison_interactions.txt/imprison_interaction
## CHARACTER (character)
## TARGET (character)
transfer_prisoner_interaction_stress_effect = {
	$CHARACTER$ = { save_temporary_scope_as = imprisoner }
	$TARGET$ = { save_temporary_scope_as = imprisonment_target }

	scope:imprisoner  = {
		if = {
			limit = { has_imprisonment_reason = scope:imprisonment_target }
			stress_impact = {
				compassionate = minor_stress_impact_gain
				forgiving = minor_stress_impact_gain
			}
		}
		else = {
			stress_impact = {
				just = medium_stress_impact_gain
				compassionate = medium_stress_impact_gain
			}
		}
	}
}

# based on ./common/scripted_effects/00_interaction_effects.txt/illegal_imprisonment_dread_effect
## CHARACTER (character)
## TARGET (character)
transfer_prisoner_interaction_dread_effect = {
	$CHARACTER$ = { save_temporary_scope_as = imprisoner }
	$TARGET$ = { save_temporary_scope_as = imprisonment_target }

	scope:imprisoner = {
		if = {
			limit = { 
				NOT = { has_imprisonment_reason = scope:imprisonment_target } 
			}
			if = {
				limit = {
					scope:imprisonment_target = {
						OR = {
							is_spouse_of = prev
							is_close_family_of = prev
							tier_or_related_liege_tier_greater_or_equal_trigger = { TIER = tier_kingdom }
						}
					}
				}
				add_dread = medium_dread_gain
			}
			else_if = {
				limit = {
					scope:imprisonment_target = {
						OR = {
							tier_or_related_liege_tier_equal_trigger = { TIER = tier_duchy }
							tier_or_related_liege_tier_equal_trigger = { TIER = tier_county }
						}
					}
				}
				add_dread = minor_dread_gain
			}
		}
	}
}

# SENDER (character)
# RECEIVER (character)
transfer_prisoner_interaction_payment_effect = {
	$SENDER$ = { save_temporary_scope_as = sender }
	$RECEIVER$ = { save_temporary_scope_as = receiver }

	if = {
		limit = { exists = scope:gold_amount }
		scope:receiver = {
			pay_short_term_gold = {
				gold = scope:gold_amount
				target = scope:sender
			}
		}
		if = {
			limit = { 
				scope:sender.dynasty ?= {
					has_dynasty_perk = fp1_pillage_legacy_3
				}
			}
			scope:sender = {
				add_prestige = scope:gold_amount
			}
		}
	}

	switch = {
		trigger = always
		scope:strong_hook = {
			scope:sender = {
				add_hook = {
					target = scope:receiver
					type = loyalty_hook
				}
			}
		}
		scope:favor = {
			scope:sender = {
				add_hook = {
					target = scope:receiver
					type = favor_hook
				}
			}
		}
	}

	if = {
		limit = { 
			exists = scope:hook
			scope:hook ?= yes
		}
		scope:receiver = {
			use_hook = scope:sender
		}
	}
}

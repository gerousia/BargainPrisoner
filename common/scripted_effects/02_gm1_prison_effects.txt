##############################
## GM1 scripted_effects list
##############################

# effects:
## move_from_prison														- Localization for the imprisoner moving the imprisonment target's prison.
## transfer_imprisoned_character_effect									- Assigns a new imprisoner to the imprisoned character and applies modifiers to all involved parties.
## transfer_imprisoned_memory_character_effect							- Generates a memory for the involved characters: imprisonment_target, prev_imprisoner, and next_prisoner.
## transfer_imprisoned_release_character_effect							- Releases the imprisonment target from their previous imprisoner.
## transfer_imprisoned_imprison_character_effect						- Imprisons the imprisonment target by the next imprisoner.
## transfer_imprisoned_stress_character_effect							- Applies stress modifiers to either the previous or next imprisoner.
## transfer_imprisoned_stress_effect									- Applies stress modifiers to the imprisoner.
## transfer_imprisoned_dread_character_effect							- Applies dread modifiers to either the previous or next imprisoner.
## transfer_imprisoned_dread_effect										- Applies dread modifiers to the imprisoner.
## transfer_imprisoned_schemes_character_effect							- Disbands any schemes by either the previous or next imprisoner against the imprisonment target.
## transfer_imprisoned_schemes_effect									- Disbands any schemes by the imprisoner against the imprisoned.
## transferred_imprisoned_family_member_consequences_effect				- Applies opinion modifiers from the imprisoned family members to either the previous or next imprisoner.
## transferred_imprisoned_war_participant_consequences_effect			- Applies opinion modifiers to all war participants involved in the war between the imprisonment target and the next imprisoner, if such a war exists.
## transferred_imprisoned_vassal_consequences_effect					- Applies tyranny modifiers to either the previous or next imprisoner if the imprisonment target is their vassal.
## transfer_imprisoned_vassal_character_effect							- Applies tyranny modifiers to the imprisoner if the imprisoned is their vassal.
## transferred_imprisoned_lover_consequences_effect						- Initiates an event to break up lovers for either the previous or next imprisoner if the imprisonment target is their lover.
## transfer_imprisoned_lover_character_effect							- Initiates an event to break up lovers between the imprisoner and the imprisoned.
## transferred_imprisoned_head_of_faith_consequences_effect				- Applies piety level modifiers to either the previous or next imprisoner if the imprisonment target is their Head of Faith.
## transfer_imprisoned_head_of_faith_character_effect					- Applies piety level modifiers to the imprisoner if the imprisoned is their Head of Faith.
## transferred_imprisoned_rivalry_consequences_effect					- Adjusts rivalry levels for either the previous or next imprisoner if the imprisonment target has a negative relationship with them.
## transfer_imprisoned_escalates_rivalry_effect							- Adjusts rivalry levels for the imprisoner if there is neither an imprisonment reason nor a war involving the imprisoned.
## transfer_imprisoned_tyranny_effect									- Applies tyranny modifiers to imprisoner if the imprisoned had no reason for imprisonment.

# localization-tooltips:
## IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_HOUSE_ARREST_TOOLTIP
## IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_DUNGEON_TOOLTIP
## IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_TOOLTIP
## IMPRISONMENT_WAR_TRANSFER_EFFECT_TOOLTIP
## IMPRISONMENT_WAR_LEADER_TRANSFER_EFFECT_TOOLTIP
## IMPRISONMENT_ALLIES_GAIN_TRANSFER_EFFECT_WAR_LEADER_TOOLTIP
## IMPRISONMENT_ALLIES_LOSE_TRANSFER_EFFECT_WAR_LEADER_TOOLTIP
## IMPRISONMENT_ALLIES_GAIN_TRANSFER_EFFECT_PARTICIPANT_TOOLTIP
## IMPRISONMENT_ALLIES_LOSE_TRANSFER_EFFECT_PARTICIPANT_TOOLTIP
## IMPRISONMENT_VASSAL_TRANSFER_EFFECT_TOOLTIP
## IMPRISONMENT_HEAD_OF_FAITH_TRANSFER_EFFECT_TOOLTIP

# variable-list:
## -

# opinion-modifier-list:
## imprisoned_me
## imprisoned_me_past
## imprisoned_family_member
## imprisoned_family_member_dungeon
## imprisoned_family_member_transferred
## imprisoned_next_imprisoner_transferred
## imprisoned_enemy_imprisoner_transferred
## imprisoned_war_leader_transferred
## imprisoned_ally_war_leader_transferred
## imprisoned_enemy_war_leader_transferred
## supported_my_war_opinion
## supported_my_enemy_opinion
## respect_opinion

##############################
## GM1 scripted_effects
##############################

#------------------------------
# imprisonment-related
#------------------------------

move_from_prison = {
	custom_description = {
		text = RELEASE_IMPRISONED_EFFECT_TT
		subject = imprisoner
		object = this
	}
	custom_description = {
		text = MOVE_FROM_PRISON_EFFECT_TT
		subject = this
	}
	hidden_effect = { release_from_prison = yes }
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## IMPRISONER (character)
## TARGET_IMPRISONER (character)
transfer_imprisoned_character_effect = {
	play_music_cue = "mx_cue_sacredrite"

	$TARGET$ = { save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$TARGET_IMPRISONER$ = { save_scope_as = next_imprisoner }
	
	transfer_imprisoned_memory_character_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transfer_imprisoned_release_character_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transfer_imprisoned_imprison_character_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:next_imprisoner
	}

	transfer_imprisoned_stress_character_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transfer_imprisoned_dread_character_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transfer_imprisoned_schemes_character_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transferred_imprisoned_family_member_consequences_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transferred_imprisoned_war_participant_consequences_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transferred_imprisoned_vassal_consequences_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transferred_imprisoned_lover_consequences_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transferred_imprisoned_head_of_faith_consequences_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transferred_imprisoned_rivalry_consequences_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
transfer_imprisoned_memory_character_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$PREV_IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$NEXT_IMPRISONER$ = { save_scope_as = next_imprisoner }

	scope:imprisonment_target = {
		create_character_memory = {
			type = transferred_imprisonment_imprisoned_memory
			participants = {
				next_imprisoner = scope:next_imprisoner
				prev_imprisoner = scope:prev_imprisoner
			}
		}
	}

	scope:next_imprisoner = {
		create_character_memory = {
			type = transferred_imprisonment_next_imprisoner_memory
			participants = {
				imprisoned = scope:imprisonment_target
				imprisoner = scope:prev_imprisoner
			}
		}
	}

	scope:prev_imprisoner = {
		create_character_memory = {
			type = transferred_imprisonment_prev_imprisoner_memory
			participants = {
				imprisoned = scope:imprisonment_target
				imprisoner = scope:next_imprisoner
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
transfer_imprisoned_release_character_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = curr_imprisoner }

	scope:imprisonment_target = {
		if = {
			limit = { 
				is_imprisoned = yes 
				is_imprisoned_by = scope:curr_imprisoner
			}

			## We won't change the original vanilla on_release_from_prison on_action.
			## Instead we'll make use of escaped_from_prison_flag character_flag.
			## * Remove when changed or if there's a better way to implement this.
			
			add_character_flag = {
				flag = escaped_from_prison_flag
				days = 1
			}

			## To make sure you don't get spammed about the release (* I don't know where this is from the code).
			add_character_flag = {
				flag = block_for_prison_release_notification
				days = 1
			}

			# imprisonment_target is released by prev_imprisoner.
			move_from_prison = yes
			
			## What technically happens when you "escaped_from_prison"?
			## - Prevents release_from_prison_memory from being created.
			## - Changes imprisoned_me to imprisoned_me_past opinion modifier. (* This doesn't even work for some reason?)

			## imprisonment_target opinion towards curr_imprisoner.
			hidden_effect = {
				if = {
					limit = {
						has_opinion_modifier = {
							modifier = imprisoned_me
							target = scope:curr_imprisoner
						}
					}
					remove_opinion = {
						modifier = imprisoned_me
						target = scope:curr_imprisoner
					}
				}
				add_opinion = {
					modifier = imprisoned_me_past
					target = scope:curr_imprisoner
				}
			}
			## They'd rather not be with their previous jailor if they are a PoS.
			if = {
				limit = {
					$NEXT_IMPRISONER$ ?= { NOT = { is_at_war_with = prev } }
					is_head_of_faith_of = { WHO ?= $NEXT_IMPRISONER$ }
					OR = {
						has_character_modifier = recently_tortured
						has_character_modifier = recently_blinded
						has_character_modifier = recently_castrated
						scope:prev_imprisoner = {
							NOR = { 
								has_trait = sadistic
								has_trait = callous
								has_trait = arbitrary
								has_trait = wrathful
								has_trait = vengeful
								has_trait = deceitful
							} 
						}
					}
				}
				add_opinion = {
					modifier = imprisoned_next_imprisoner_transferred
					target = scope:curr_imprisoner
				}
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
transfer_imprisoned_imprison_character_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = curr_imprisoner }

	scope:imprisonment_target = {
		if = {
			limit = {
				exists = liege
				OR = {
					is_landed = yes
					is_close_or_extended_family_of = liege
					is_spouse_of = liege
				}
			}
			scope:curr_imprisoner = {
				imprison = {
					target = prev
					type = house_arrest
				}
			}
		}
		else = {
			scope:curr_imprisoner = {
				imprison = {
					target = prev
					type = dungeon
				}
			}
		}
		## imprisonment_target opinion towards curr_imprisoner.
		add_opinion = {
			modifier = imprisoned_me
			target = scope:curr_imprisoner
		}
	}
}

# TARGET (character)
# PREV_IMPRISONER (character)
# NEXT_IMPRISONER (character)
transfer_imprisoned_stress_character_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$PREV_IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$NEXT_IMPRISONER$ = { save_scope_as = next_imprisoner }

	transfer_imprisoned_stress_effect = { 
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:prev_imprisoner
	}
		
	transfer_imprisoned_stress_effect = { 
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:next_imprisoner
	}
}

# based on ./common/character_interactions/00_prison_interactions.txt/imprison_interaction
## TARGET (character)
## IMPRISONER (character)
transfer_imprisoned_stress_effect = {
	$TARGET$ = {save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = curr_imprisoner }

	scope:curr_imprisoner = {
		if = {
			limit = { has_imprisonment_reason = scope:imprisonment_target }
			stress_impact = {
				compassionate = minor_stress_impact_gain
				forgiving = minor_stress_impact_gain
			}
		}
		else = {
			stress_impact = {
				just = medium_stress_impact_gain
				compassionate = medium_stress_impact_gain
			}
		}
	}
}

# TARGET (character)
# PREV_IMPRISONER (character)
# NEXT_IMPRISONER (character)
transfer_imprisoned_dread_character_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$PREV_IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$NEXT_IMPRISONER$ = { save_scope_as = next_imprisoner }

	transfer_imprisoned_dread_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:prev_imprisoner
	}

	transfer_imprisoned_dread_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:next_imprisoner
	}
}

# based on ./common/scripted_effects/00_interaction_effects.txt/illegal_imprisonment_dread_effect
## TARGET (character)
## IMPRISONER (character)
transfer_imprisoned_dread_effect = {
	$TARGET$ = {save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = curr_imprisoner }

	scope:curr_imprisoner = {
		if = {
			limit = { NOT = { has_imprisonment_reason = scope:imprisonment_target } }
			if = {
				limit = {
					scope:imprisonment_target = {
						OR = {
							is_spouse_of = prev
							is_close_family_of = prev
							tier_or_related_liege_tier_greater_or_equal_trigger = { TIER = tier_kingdom }
						}
					}
				}
				add_dread = medium_dread_gain
			}
			else_if = {
				limit = {
					scope:imprisonment_target = {
						OR = {
							tier_or_related_liege_tier_equal_trigger = { TIER = tier_duchy }
							tier_or_related_liege_tier_equal_trigger = { TIER = tier_county }
						}
					}
				}
				add_dread = minor_dread_gain
			}
		}
	}
}

# TARGET (character)
# PREV_IMPRISONER (character)
# NEXT_IMPRISONER (character)
transfer_imprisoned_schemes_character_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$PREV_IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$NEXT_IMPRISONER$ = { save_scope_as = next_imprisoner }

	transfer_imprisoned_schemes_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:prev_imprisoner
	}

	transfer_imprisoned_schemes_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:next_imprisoner
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## IMPRISONER (character)
transfer_imprisoned_schemes_effect = {
	$TARGET$ = {save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = curr_imprisoner }

	scope:curr_imprisoner = {
		if = {
			limit = { any_scheme = { scheme_target = scope:imprisonment_target } }
			every_scheme = {
				limit = { scheme_target = scope:imprisonment_target }
				end_scheme = yes
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
transferred_imprisoned_family_member_consequences_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$PREV_IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$NEXT_IMPRISONER$ = { save_scope_as = next_imprisoner }

	scope:imprisonment_target = {
		## imprisonment_target's close_or_extended_family_member opinion towards prev_imprisoner.
		if = {
			limit = { 
				any_close_or_extended_family_member = { 
					count >= 1
					NOT = { scope:next_imprisoner = this } 
					NOT = { scope:prev_imprisoner = this }
				} 
			}
			IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_TOOLTIP = { WHO = scope:prev_imprisoner }
			hidden_effect = {
				every_close_or_extended_family_member = {
					limit = {
						OR = {
							NOT = { scope:next_imprisoner = this } 
							NOT = { scope:prev_imprisoner = this } 
						}
					}
					add_opinion = {
						modifier = imprisoned_family_member_transferred
						target = scope:prev_imprisoner
					}
				}
			}
		}

		## imprisonment_target's close_or_extended_family_member opinion towards next_imprisoner.
		if = {
			limit = { is_in_prison_type = house_arrest }
			if = {
				limit = { 
					any_close_or_extended_family_member = { 
						count >= 1
						NOT = { scope:next_imprisoner = this } 
						NOT = { scope:prev_imprisoner = this }
					} 
				}
				IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_HOUSE_ARREST_TOOLTIP = { WHO = scope:next_imprisoner }
				hidden_effect = {
					every_close_or_extended_family_member = {
						limit = {
							NOT = { scope:next_imprisoner = this } 
							NOT = { scope:prev_imprisoner = this } 
						}
						add_opinion = {
							modifier = imprisoned_family_member
							target = scope:next_imprisoner
						}
					}
				}
			}
		}
		else_if = {
			limit = { is_in_prison_type = dungeon }
			if = {
				limit = { 
					any_close_or_extended_family_member = { 
						count >= 1
						NOT = { scope:next_imprisoner = this } 
						NOT = { scope:prev_imprisoner = this }
					} 
				}
				IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_DUNGEON_TOOLTIP = { WHO = scope:next_imprisoner }
				hidden_effect = {
					every_close_or_extended_family_member = {
						limit = {
							NOT = { scope:next_imprisoner = this } 
							NOT = { scope:prev_imprisoner = this } 
						}
						add_opinion = {
							modifier = imprisoned_family_member_dungeon
							target = scope:next_imprisoner
						}
					}
				}
			}
		}
	}
}

# TARGET (character)
# PREV_IMPRISONER (character)
# NEXT_IMPRISONER (character)
transferred_imprisoned_war_participant_consequences_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$PREV_IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$NEXT_IMPRISONER$ = { save_scope_as = next_imprisoner }

	# prev_imprisoner tooltip for sadistic roleplayers.
	scope:prev_imprisoner = {
		if = {
			limit = {
				is_at_war_with = scope:imprisonment_target
				NOT = { is_allied_in_war = scope:imprisonment_target }
			}
			IMPRISONMENT_WAR_TRANSFER_EFFECT_TOOLTIP = { # but why though?
				WHO = this
				WITH = scope:imprisonment_target 
			}
		}
	}

	# imprisonment_target's opinion towards prev_imprisoner.
	scope:imprisonment_target = {
		if = {
			limit = {
				is_at_war_with = scope:next_imprisoner
				NOT = { is_allied_in_war = scope:next_imprisoner }
			}
			add_opinion = {
				modifier = imprisoned_enemy_imprisoner_transferred
				target = scope:prev_imprisoner
			}
		}
	}

	# imprisonment_target's war_participants.
	scope:imprisonment_target = {
		## imprisonment_target as a war_leader.
		every_character_war = {
			limit = {
				any_war_participant = { scope:next_imprisoner = this }
				prev = { NOT = { is_allied_in_war = scope:next_imprisoner } }
				is_war_leader = prev 
			}

			### imprisonment_target's allies opinion in war towards prev_imprisoner.
			IMPRISONMENT_WAR_TRANSFER_EFFECT_TOOLTIP = { 
				WHO = scope:imprisonment_target
				WITH = scope:next_imprisoner 
			}
			if = {
				limit = {
					any_war_participant = {
						count >= 1
						NOT = { scope:imprisonment_target = this }
						NOT = { scope:next_imprisoner = this } 
						NOT = { scope:prev_imprisoner = this } 
						is_allied_in_war = scope:imprisonment_target
					}
				}
				IMPRISONMENT_ALLIES_LOSE_TRANSFER_EFFECT_WAR_LEADER_TOOLTIP = { 
					WHO = scope:imprisonment_target
					TARGET = scope:prev_imprisoner
				}
				hidden_effect = {
					every_war_participant = {
						limit = {
							NOT = { scope:imprisonment_target = this }
							NOT = { scope:next_imprisoner = this } 
							NOT = { scope:prev_imprisoner = this } 
							is_allied_in_war = scope:imprisonment_target
						}
						add_opinion = {
							modifier = imprisoned_ally_war_leader_transferred
							target = scope:prev_imprisoner
						}
					}
				}
			}

			IMPRISONMENT_WAR_LEADER_TRANSFER_EFFECT_TOOLTIP = { 
				WHO = scope:imprisonment_target
			}

			### next_imprisoner's opinon in war towards prev_imprisoner.
			scope:next_imprisoner = {
				add_opinion = {
					modifier = supported_my_war_opinion
					target = scope:prev_imprisoner
					opinion = 40
				}
			}

			### next_imprisoner's allies opinion in war towards prev_imprisoner.
			IMPRISONMENT_WAR_TRANSFER_EFFECT_TOOLTIP = { 
				WHO = scope:next_imprisoner
				WITH = scope:imprisonment_target 
			}
			if = {
				limit = {
					any_war_participant = {
						count >= 1
						NOT = { scope:imprisonment_target = this }
						NOT = { scope:next_imprisoner = this } 
						NOT = { scope:prev_imprisoner = this } 
						is_allied_in_war = scope:next_imprisoner
					}
				}
				IMPRISONMENT_ALLIES_GAIN_TRANSFER_EFFECT_WAR_LEADER_TOOLTIP = { 
					WHO = scope:next_imprisoner
					TARGET = scope:prev_imprisoner
				}
				hidden_effect = {
					every_war_participant = {
						limit = {
							NOT = { scope:imprisonment_target = this }
							NOT = { scope:next_imprisoner = this } 
							NOT = { scope:prev_imprisoner = this } 
							is_allied_in_war = scope:next_imprisoner
						}
						add_opinion = {
							modifier = imprisoned_enemy_war_leader_transferred
							target = scope:prev_imprisoner
						}
					}
				}
			}
		}

		## imprisonment_target as a participant.
		every_character_war = {
			limit = {
				any_war_participant = { scope:next_imprisoner = this }
				prev = { NOT = { is_allied_in_war = scope:next_imprisoner } }
				NOT = { is_war_leader = prev }
			}

			### imprisonment_target's allies opinion in war towards prev_imprisoner.
			IMPRISONMENT_WAR_TRANSFER_EFFECT_TOOLTIP = { 
				WHO = scope:imprisonment_target
				WITH = scope:next_imprisoner 
			}

			if = {
				limit = {
					any_war_participant = {
						count >= 1
						NOT = { scope:imprisonment_target = this }
						NOT = { scope:next_imprisoner = this } 
						NOT = { scope:prev_imprisoner = this } 
						is_allied_in_war = scope:imprisonment_target
					}
				}
				IMPRISONMENT_ALLIES_LOSE_TRANSFER_EFFECT_PARTICIPANT_TOOLTIP = { 
					WHO = scope:imprisonment_target 
					TARGET = scope:prev_imprisoner
				}
				hidden_effect = {
					every_war_participant = {
						limit = {
							NOT = { scope:imprisonment_target = this }
							NOT = { scope:next_imprisoner = this } 
							NOT = { scope:prev_imprisoner = this } 
							is_allied_in_war = scope:imprisonment_target
						}
						add_opinion = {
							modifier = supported_my_enemy_opinion
							target = scope:prev_imprisoner
						}
					}
				}
			}

			### next_imprisoner's opinon in war towards prev_imprisoner.
			scope:next_imprisoner = {
				add_opinion = {
					modifier = supported_my_war_opinion
					target = scope:prev_imprisoner
				}
			}

			### next_imprisoner's allies opinion in war towards prev_imprisoner.
			IMPRISONMENT_WAR_TRANSFER_EFFECT_TOOLTIP = { 
				WHO = scope:next_imprisoner
				WITH = scope:imprisonment_target 
			}

			if = {
				limit = {
					any_war_participant = {
						count >= 1
						NOT = { scope:imprisonment_target = this }
						NOT = { scope:next_imprisoner = this } 
						NOT = { scope:prev_imprisoner = this } 
						is_allied_in_war = scope:next_imprisoner
					}
				}
				IMPRISONMENT_ALLIES_GAIN_TRANSFER_EFFECT_PARTICIPANT_TOOLTIP = { 
					WHO = scope:next_imprisoner
					TARGET = scope:prev_imprisoner 
				}
				hidden_effect = {
					every_war_participant = {
						limit = {
							NOT = { scope:imprisonment_target = this }
							NOT = { scope:next_imprisoner = this } 
							NOT = { scope:prev_imprisoner = this } 
							is_allied_in_war = scope:next_imprisoner
						}
						add_opinion = {
							modifier = supported_my_war_opinion
							target = scope:prev_imprisoner
						}
					}
				}
			}
		}
	}
}

# TARGET (character)
# PREV_IMPRISONER (character)
# NEXT_IMPRISONER (character)
transferred_imprisoned_vassal_consequences_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$PREV_IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$NEXT_IMPRISONER$ = { save_scope_as = next_imprisoner }

	## sending without any imprisonment_reason incurs tyranny.
	transfer_imprisoned_vassal_character_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:prev_imprisoner
	}

	## recieving without any imprisonment_reason incurs tyranny.
	transfer_imprisoned_vassal_character_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:next_imprisoner
	}
}

# TARGET (character)
# IMPRISONER (character)
transfer_imprisoned_vassal_character_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = curr_imprisoner }

	scope:curr_imprisoner = {
		if = {
			limit = { scope:imprisonment_target = { is_vassal_of = prev } }
			transfer_imprisoned_tyranny_effect = {
				TARGET = scope:imprisonment_target
				IMPRISONER = this
			}
			IMPRISONMENT_VASSAL_TRANSFER_EFFECT_TOOLTIP = { 
				WHO = this
				VASSAL = scope:imprisonment_target
			}
		}
	}
}

# TARGET (character)
# PREV_IMPRISONER (character)
# NEXT_IMPRISONER (character)
transferred_imprisoned_lover_consequences_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$PREV_IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$NEXT_IMPRISONER$ = { save_scope_as = next_imprisoner }

	## receives a break-up event if imprisonment_target's is their lover.
	transfer_imprisoned_lover_character_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:prev_imprisoner
	}

	## receives a break-up event if imprisonment_target's is their lover.
	transfer_imprisoned_lover_character_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:next_imprisoner
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## IMPRISONER (character)
transfer_imprisoned_lover_character_effect = {
	$TARGET$ = {save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = curr_imprisoner }

	scope:curr_imprisoner = {
		if = {
			limit = {
				has_relation_lover = scope:imprisonment_target
				NOT = { has_relation_rival = scope:imprisonment_target }
			}
			scope:imprisonment_target = {
				trigger_event = {
					id = lover.0101 # TODO Replacement
					days = { 14 30 }
				}
			}
		}
	}
}

# TARGET (character)
# PREV_IMPRISONER (character)
# NEXT_IMPRISONER (character)
transferred_imprisoned_head_of_faith_consequences_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$PREV_IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$NEXT_IMPRISONER$ = { save_scope_as = next_imprisoner }

	## send without any imprisonment_reason incurs piety_level loss.
	transfer_imprisoned_head_of_faith_character_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:prev_imprisoner
	}

	## recieve without any imprisonment_reason incurs piety_level loss.
	transfer_imprisoned_head_of_faith_character_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:next_imprisoner
	}

}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_HoF_consequences_effect
## TARGET (character)
## IMPRISONER (character)
transfer_imprisoned_head_of_faith_character_effect = {
	$TARGET$ = {save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = curr_imprisoner }

	scope:curr_imprisoner = {
		if = {
			limit = { 
				NOT = { has_imprisonment_reason = scope:imprisonment_target }
				scope:imprisonment_target = {
					is_head_of_faith_of = { WHO = prev }
				}
			}

			reverse_add_opinion = {
				modifier = imprisoned_head_of_faith_transferred
				target = scope:imprisonment_target
			}

			add_piety_level = -1
			add_piety = medium_piety_loss
			IMPRISONMENT_HEAD_OF_FAITH_TRANSFER_EFFECT_TOOLTIP = { 
				WHO = this
				HEAD_OF_FAITH = scope:imprisonment_target 
			}
		}
	}
}

# TARGET (character)
# PREV_IMPRISONER (character)
# NEXT_IMPRISONER (character)
transferred_imprisoned_rivalry_consequences_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$PREV_IMPRISONER$ = { save_scope_as = prev_imprisoner }
	$NEXT_IMPRISONER$ = { save_scope_as = next_imprisoner }

	# send without imprisonment_reasons or while at war with the recipient incurs rivalry.
	transfer_imprisoned_escalates_rivalry_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:prev_imprisoner
		OTHER = scope:next_imprisoner
	}

	# recieve without imprisonment_reasons or while at war with the recipient incurs rivalry.
	transfer_imprisoned_escalates_rivalry_effect = {
		TARGET = scope:imprisonment_target
		IMPRISONER = scope:next_imprisoner
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_attempt_escalates_rivalry_effect
## TARGET (character)
## IMPRISONER (character)
transfer_imprisoned_escalates_rivalry_effect = {
	$TARGET$ = {save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = curr_imprisoner }

	scope:imprisonment_target = {
		if = {
			limit = {
				NOT = { has_relation_rival = scope:curr_imprisoner }
				OR = {
					$OTHER$ ?= { is_at_war_with = prev }
					has_requested_excommunication_by = { WHO = scope:curr_imprisoner }
					has_opinion_modifier = {
						target = scope:curr_imprisoner
						modifier = revoked_title
					}
				}
			}
			hidden_effect = {
				if = {
					limit = { has_relation_potential_rival = scope:curr_imprisoner }
					remove_relation_potential_rival = scope:curr_imprisoner
				}
			}
			set_relation_rival = scope:curr_imprisoner
		}
		else = {
			hidden_effect = {
				progress_towards_rival_effect = {
					CHARACTER = scope:curr_imprisoner
					REASON = rival_imprisoned
					OPINION = 0
				}
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_tyranny_effect
## TARGET (character)
## IMPRISONER (character)
transfer_imprisoned_tyranny_effect = {
	$TARGET$ = {save_scope_as = imprisonment_target }
	$IMPRISONER$ = { save_scope_as = curr_imprisoner }

	## Determine if tyrannical or not
	scope:curr_imprisoner = { 
		if = {
			limit = { exists = scope:use_strife_not_tyranny }
			if = {
				limit = { has_imprisonment_reason = scope:imprisonment_target }
				consume_imprisonment_reasons = scope:imprisonment_target
			}
			else = { change_strife_opinion = medium_strige_gain }
		}
		else_if = {
			limit = { has_imprisonment_reason = scope:imprisonment_target }
			custom_tooltip = IS_ALLOWED_TO_TRANSFER_IMPRISONED_DESC
		}
		else_if = {
			limit = { is_at_war_with = scope:imprisonment_target }
			custom_tooltip = IS_ALLOWED_TO_TRANSFER_IMPRISONED_AT_WAR_DESC # But why would you do this though?
		}
		else = { add_tyranny = imprisonment_tyranny_gain }
	}
}

#------------------------------
# localization-related
#------------------------------

# To the author at PDX who wrote this original line, "- there is no god nor consistency when it comes to localization.", you're goddamn right.

# WHO (character)
IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_HOUSE_ARREST_TOOLTIP = {
	$WHO$ = { save_scope_as = TARGET_IMPRISONER }
	custom_tooltip = IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_HOUSE_ARREST
}

# WHO (character)
IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_DUNGEON_TOOLTIP = {
	$WHO$ = { save_scope_as = TARGET_IMPRISONER }
	custom_tooltip = IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_DUNGEON
}

# WHO (character)
IMPRISONMENT_RELATIVES_TRANSFER_EFFECT_TOOLTIP = {
	$WHO$ = { save_scope_as = TARGET_IMPRISONER }
	custom_tooltip = IMPRISONMENT_RELATIVES_TRANSFER_EFFECT
}

# WHO (character)
# WITH (character)
IMPRISONMENT_WAR_TRANSFER_EFFECT_TOOLTIP = {
	custom_description = {
		text = IMPRISONMENT_WAR_TRANSFER_EFFECT_TT
		subject = $WHO$
		object = $WITH$
	}
}

# WHO (character)
IMPRISONMENT_WAR_LEADER_TRANSFER_EFFECT_TOOLTIP = {
	custom_description_no_bullet = {
		text = IMPRISONMENT_WAR_LEADER_TRANSFER_EFFECT_TT
		subject = $WHO$
	}
}

# WHO (character)
# TARGET (character)
IMPRISONMENT_ALLIES_GAIN_TRANSFER_EFFECT_WAR_LEADER_TOOLTIP = {
	custom_description_no_bullet = { 
		text = IMPRISONMENT_ALLIES_GAIN_TRANSFER_EFFECT_WAR_LEADER_TT ## imprisonment_target's enemies
		subject = $WHO$
		object = $TARGET$
	}
}

# WHO (character)
# TARGET (character)
IMPRISONMENT_ALLIES_LOSE_TRANSFER_EFFECT_WAR_LEADER_TOOLTIP = {
	custom_description_no_bullet = { 
		text = IMPRISONMENT_ALLIES_LOSE_TRANSFER_EFFECT_WAR_LEADER_TT ## imprisonment_target's allies
		subject = $WHO$
		object = $TARGET$
	}
}

# WHO (character)
# TARGET (character)
IMPRISONMENT_ALLIES_GAIN_TRANSFER_EFFECT_PARTICIPANT_TOOLTIP = {
	custom_description_no_bullet = { 
		text = IMPRISONMENT_ALLIES_GAIN_TRANSFER_EFFECT_PARTICIPANT_TT ## imprisonment_target's enemies
		subject = $WHO$
		object = $TARGET$
	}
}

# WHO (character)
# TARGET (character)
IMPRISONMENT_ALLIES_LOSE_TRANSFER_EFFECT_PARTICIPANT_TOOLTIP = {
	custom_description_no_bullet = { 
		text = IMPRISONMENT_ALLIES_LOSE_TRANSFER_EFFECT_PARTICIPANT_TT ## imprisonment_target's allies
		subject = $WHO$
		object = $TARGET$
	}
}

# WHO (character)
IMPRISONMENT_VASSAL_TRANSFER_EFFECT_TOOLTIP = {
	custom_description = {
		text = IMPRISONMENT_VASSAL_TRANSFER_EFFECT_TT
		subject = $WHO$
		object = $VASSAL$
	}
}

# WHO (character)
# HEAD_OF_FAITH (character
IMPRISONMENT_HEAD_OF_FAITH_TRANSFER_EFFECT_TOOLTIP = {
	custom_description = {
		text = IMPRISONMENT_HEAD_OF_FAITH_TRANSFER_EFFECT_TT
		subject = $WHO$
		object = $HEAD_OF_FAITH$ 
	}
}
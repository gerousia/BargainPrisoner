##############################
## GM1 scripted_effects
##############################

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## PRISONER (character)
## IMPRISONER (character)
## NEW_IMPRISONER (character)
change_imprisoner_character_effect = {
	$PRISONER$ = { save_temporary_scope_as = imprisonment_target }
	$OLD_IMPRISONER$ = { save_temporary_scope_as = old_imprisoner }
	$NEW_IMPRISONER$ = { save_temporary_scope_as = new_imprisoner }	

	if = {
		limit = {
			scope:imprisonment_target = {
				is_imprisoned = yes
				is_imprisoned_by = scope:old_imprisoner
			}
		}

		scope:imprisonment_target = {
			### We won't modify `on_release_from_prison` for compatibiity.
			### Adding a `escaped_from_prison_flag` flag does the following:
			### - `release_from_prison_memory` prevented from being created
			### - `imprisoned_me` -> `imprisoned_me_past` in `prison.0001`
			custom_description = { 
				text = "release_tooltip"
				subject = scope:old_imprisoner
				object = this
				if = {
					limit = { has_character_modifier = allowed_to_go_outside }
					remove_character_modifier = allowed_to_go_outside
				}
				if = {
					limit = { has_character_modifier = moldy_gruel_diet }
					remove_character_modifier = moldy_gruel_diet
				}
				add_character_flag = {
					flag = escaped_from_prison_flag
					days = 1
				}
				add_character_flag = {
					flag = block_for_prison_release_notification
					days = 1
				}
				release_from_prison = yes
				remove_character_flag = escaped_from_prison_flag
			}

			custom_description = {
				text = "move_tooltip"
				if = {
					limit = { has_character_flag = under_prison_transfer }
					remove_character_flag = under_prison_transfer
				}
				add_character_flag = {
					flag = recently_prison_transferred
					years = 3
				}
			}

			### MEMORY
			create_character_memory = {
				type = change_imprisoner_prisoner_memory
				participants = {
					old_imprisoner = scope:old_imprisoner
					new_imprisoner = scope:new_imprisoner
				}
			}

			### PENALTIES
			### Enabled with 'default penalties' game rule on. But disabled on `limited penalties`.
			if = {
				limit = {
					OR = {
						AND = {
							scope:sender = { is_ai = yes }
							scope:receiver = { is_ai = yes }
						}
						has_game_rule = transfer_prisoner_default_interaction_penalties
					}
				}
			change_imprisoner_consequences_family_effect = {
				TARGET = this
				OLD_IMPRISONER = scope:old_imprisoner
				NEW_IMPRISONER = scope:new_imprisoner
			}
			change_imprisoner_consequences_clan_effect = {
				CHARACTER = scope:old_imprisoner
				TARGET = this
				}
			}
		}

		scope:old_imprisoner = {
			### MEMORY
			create_character_memory = {
				type = change_imprisoner_old_imprisoner_memory
				participants = {
					prisoner = scope:imprisonment_target
					new_imprisoner = scope:new_imprisoner
				}
			}

			### OPINIONS
			### Enabled with 'default penalties' game rule on. But disabled on `limited penalties`.
			if = {
				limit = {
					OR = {
						AND = {
							scope:sender = { is_ai = yes }
							scope:receiver = { is_ai = yes }
						}
						has_game_rule = transfer_prisoner_default_interaction_penalties
					}
				}
			if = {
				### Prisoner is at risk of execution due to differing faith
				limit = { 
					NOT = { scope:imprisonment_target.faith = scope:new_imprisoner.faith } 
				}
				reverse_add_opinion = {
					target = scope:imprisonment_target
					modifier = transferred_me_different_faith
				}
			}
			else_if = {
				### Prisoner thinks their previous imprisoner is a PoS
				limit = {
					NOT = { 
						has_any_bad_relationship_with_character_trigger = { 
							CHARACTER = scope:imprisonment_target
						}
						OR = {
							has_trait = sadistic
							has_trait = callous
							has_trait = arbitrary
							has_trait = wrathful
							has_trait = vengeful
							has_trait = deceitful
						}
					}
				}
				reverse_add_opinion = {
					target = scope:imprisonment_target
					modifier = transferred_me
				}
			}
			}

			### PENALTIES
			### Enabled with 'default penalties' game rule on. But disabled on `limited penalties`.
			if = {
				limit = {
					OR = {
						AND = {
							scope:sender = { is_ai = yes }
							scope:receiver = { is_ai = yes }
						}
						has_game_rule = transfer_prisoner_default_interaction_penalties
					}
				}
			change_imprisoner_consequences_lover_effect = {
				CHARACTER = this
				TARGET = scope:imprisonment_target
			}
				change_imprisoner_consequences_head_of_faith_effect = {
				CHARACTER = this
				TARGET = scope:imprisonment_target
			}
				change_imprisoner_consequences_vassal_effect = {
				CHARACTER = this
				TARGET = scope:imprisonment_target
				}
			}

			## EXTRA
			imprison_remove_ward_guardian_effect = { 
				IMPRISONER = this
				PRISONER = scope:imprisonment_target 
			}
		}

		scope:new_imprisoner = {
			if = {
				limit = {
					scope:imprisonment_target = {
						exists = liege
						OR = {
							is_landed = yes
							is_close_or_extended_family_of = liege
							is_spouse_of = liege
						}
					}
				}
				imprison = {
					target = scope:imprisonment_target
					type = house_arrest
				}
			}
			else = {
				imprison = {
					target = scope:imprisonment_target
					type = dungeon
				}
			}

			### MEMORY
			create_character_memory = {
				type = change_imprisoner_new_imprisoner_memory
				participants = {
					prisoner = scope:imprisonment_target
					old_imprisoner = scope:old_imprisoner
				}
			}

			### OPINIONS
			### Enabled with 'default penalties' game rule on. But disabled on `limited penalties`.
			if = {
				limit = {
					OR = {
						AND = {
							scope:sender = { is_ai = yes }
							scope:receiver = { is_ai = yes }
						}
						has_game_rule = transfer_prisoner_default_interaction_penalties
					}
				}
				if = {
					limit = {
						scope:imprisonment_target = {
							has_opinion_modifier = {
								target = scope:new_imprisoner
								modifier = imprisoned_me_past
							}
						}
					}
					hidden_effect = {
						scope:imprisonment_target = {
							remove_opinion = {
								target = scope:new_imprisoner
								modifier = imprisoned_me
							}
						}
					}
				}
				reverse_add_opinion = {
					target = scope:imprisonment_target
					modifier = imprisoned_me
				}
			}

			## PENALTIES
			## Enabled with 'default penalties' game rule on.
			### Enabled with 'default penalties' game rule on. But disabled on `limited penalties`.
			if = {
				limit = {
					OR = {
						AND = {
							scope:sender = { is_ai = yes }
							scope:receiver = { is_ai = yes }
						}
						has_game_rule = transfer_prisoner_default_interaction_penalties
					}
				}
			change_imprisoner_consequences_lover_effect = {
				CHARACTER = this
				TARGET = scope:imprisonment_target
			}
				change_imprisoner_consequences_head_of_faith_effect = {
				CHARACTER = this
				TARGET = scope:imprisonment_target
			}
				change_imprisoner_consequences_vassal_effect = {
				CHARACTER = this
				TARGET = scope:imprisonment_target
			}
		}

			## EXTRA
			imprison_remove_ward_guardian_effect = { 
				IMPRISONER = this
				PRISONER = scope:imprisonment_target 
			}
		}

		### ADDITIONAL
		### Enabled with 'default penalties' game rule on. But disabled on `limited penalties`.
		if = {
			limit = {
				OR = {
					AND = {
						scope:sender = { is_ai = yes }
						scope:receiver = { is_ai = yes }
					}
					has_game_rule = transfer_prisoner_default_interaction_penalties
				}
			}
		change_imprisoner_consequences_war_effect = {
			OLD_IMPRISONER = scope:old_imprisoner
			NEW_IMPRISONER = scope:new_imprisoner
			TARGET = scope:imprisonment_target
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## CHARACTER (character)
## TARGET (character)
change_imprisoner_consequences_lover_effect = {
	$CHARACTER$ = { save_temporary_scope_as = imprisoner }
	$TARGET$ = { save_temporary_scope_as = imprisonment_target }

	scope:imprisoner = {
		if = {
			limit = {
				has_relation_lover = scope:imprisonment_target
				NOT = { has_relation_rival = scope:imprisonment_target }
			}
			scope:imprisonment_target = {
				trigger_event = {
					id = lover.0101
					days = { 14 30 }
				}
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## OLD_IMPRISONER (character)
## NEW_IMPRISONER (character)
## TARGET (character)
change_imprisoner_consequences_family_effect = {
	$OLD_IMPRISONER$ = { save_temporary_scope_as = old_imprisoner }
	$NEW_IMPRISONER$ = { save_temporary_scope_as = new_imprisoner }
	$TARGET$ = { save_temporary_scope_as = imprisonment_target }

	## Create a family list for the prisoner.
	hidden_effect = {
		scope:imprisonment_target = {
			every_close_or_extended_family_member = {
				limit = { 
					NOT = { scope:old_imprisoner = this }
					NOT = { scope:new_imprisoner = this }
				}
				add_to_temporary_list = prisoner_family_list
			}
		}
	}

	scope:imprisonment_target = {
		if = {
			limit = {
				any_in_list = {
					list = prisoner_family_list
					count > 0
				}
			}
			every_in_list ={
				list = prisoner_family_list
				custom = all_close_family_and_spouses
	
				## The prisoner family opinion towards the old imprisoner.
				add_opinion = {
					target = scope:old_imprisoner
					modifier = transferred_family_member
				}
	
				## The prisoner family opinion towards the new imprisoner.
				if = {
					limit = { 
						scope:imprisonment_target = { 
							is_in_prison_type = house_arrest 
						}
					}
					add_opinion = {
						target = scope:new_imprisoner
						modifier = imprisoned_family_member
					}
				}
				else_if = {
					limit = { 
						scope:imprisonment_target = { 
							is_in_prison_type = dungeon 
						}
					}
					add_opinion = {
						target = scope:new_imprisoner
						modifier = imprisoned_family_member_dungeon
					}
				}
			}
		}
	}
}

# based on ./common/character_interactions/00_prison_interactions.txt/imprison_interaction
## CHARACTER (character)
## TARGET (character)
change_imprisoner_consequences_clan_effect = {
	$CHARACTER$ = { save_temporary_scope_as = imprisoner }
	$TARGET$ = { save_temporary_scope_as = imprisonment_target }

	scope:imprisoner = {
		if = {
			limit = { 
				government_has_flag = government_is_clan
				house = scope:imprisonment_target.house
			}
			## Target does not have an imprisonment reason, and the prisoner is landed.
			## The clan loses more unity.
			if = {
				limit = {
					NOT = { has_imprisonment_reason = scope:imprisonment_target }
					scope:imprisonment_target = { is_landed = yes }
				}
				add_clan_unity_interaction_effect = {
					CHARACTER = scope:imprisoner
					TARGET = scope:imprisonment_target
					VALUE = major_unity_loss
					DESC = clan_unity_transfer_prisoner.desc
					REVERSE_NON_HOUSE_TARGET = no
				}
			}
			## Target does not have an imprisonment reason, and the prisoner is unlanded.
			## The clan loses slightly less unity.
			else_if = {
				limit = {
					NOT = { has_imprisonment_reason = scope:imprisonment_target }
					scope:imprisonment_target = { is_landed = no }
				}
				add_clan_unity_interaction_effect = {
					CHARACTER = scope:imprisoner
					TARGET = scope:imprisonment_target
					VALUE = medium_unity_loss
					DESC = clan_unity_transfer_prisoner.desc
					REVERSE_NON_HOUSE_TARGET = no
				}
			}
			## Target does have an imprisonment reason, but the prisoner is still family.
			## The clan loses a tiny bit of unity.
			else = {
				add_clan_unity_interaction_effect = {
					CHARACTER = scope:imprisoner
					TARGET = scope:imprisonment_target
					VALUE = minor_unity_loss
					DESC = clan_unity_transfer_prisoner.desc
					REVERSE_NON_HOUSE_TARGET = no
				}
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_court_chaplain_consequences_effect
# Note: I left this here just in case, but this practically isn't going to be used anyway.
## CHARACTER (character)
## TARGET (character)
change_imprisoner_consequences_court_chaplain_effect = {	
	$CHARACTER$ = { save_temporary_scope_as = imprisoner }
	$TARGET$ = { save_temporary_scope_as = imprisonment_target }

	scope:imprisoner = {
		if = {
			limit = {
				scope:imprisonment_target = { 
					has_council_position = councillor_court_chaplain
					can_be_fired_from_council_trigger = { 
						COURT_OWNER = prev
					}
				}
			}
			custom_description = {
				text = "change_imprisoner_court_chaplain_tooltip"
				subject = this
				object = scope:imprisonment_target
			}
			if = {
				limit = { has_imprisonment_reason = scope:imprisonment_target }
				custom_description = { 
					text = "add_opinion_imprison_reason_unusable"
					object = scope:imprisonment_target
				}
			}
			else = {
				add_piety_level = -1

				if = {
					limit = { faith = { exists = religious_head } }
					faith.religious_head = {
						reverse_add_opinion = {
							target = prev
							modifier = respect_opinion
							opinion = -30
						}
					}
				}
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_HoF_consequences_effect
## CHARACTER (character)
## TARGET (character)
change_imprisoner_consequences_head_of_faith_effect = {	
	$CHARACTER$ = { save_temporary_scope_as = imprisoner }
	$TARGET$ = { save_temporary_scope_as = imprisonment_target }

	scope:imprisoner = {
		if = {
			limit = {
				exists = faith.religious_head
				faith.religious_head ?= scope:imprisonment_target
			}
			custom_description = {
				text = "change_imprisoner_head_of_faith_tooltip"
				subject = this
				object = scope:imprisonment_target
			}
			if = {
				limit = { is_at_war_with = scope:imprisonment_target }
				custom_description = { 
					text = "add_opinion_imprison_reason_unusable"
					object = scope:imprisonment_target
				}
			}
			else_if = {
				limit = { has_imprisonment_reason = scope:imprisonment_target }
				custom_description = { 
					text = "add_opinion_imprison_reason_unusable"
					object = scope:imprisonment_target
				}
			}
			else = {
				add_piety_level = -1
				add_piety = medium_piety_loss
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_tyranny_effect
## CHARACTER (character)
## TARGET (character)
change_imprisoner_consequences_vassal_effect = {
	$CHARACTER$ = { save_temporary_scope_as = imprisoner }
	$TARGET$ = { save_temporary_scope_as = imprissonment_target }

	scope:imprisoner = {
		if = {
			limit = {
				exists = scope:imprisonment_target.liege
				scope:imprisonment_target.liege ?= this
			}
			custom_description = {
				text = "change_imprisoner_vassal_tooltip"
				subject = this
				object = scope:imprisonment_target
				if = {
					limit = { is_a_faction_member = yes }
					scope:imprisonment_target = {
						joined_faction = { save_scope_as = retaliating_faction }
					}
				}
			}
			if = {
				limit = { is_at_war_with = scope:imprisonment_target }
				custom_description = { 
					text = "add_opinion_imprison_reason_unusable"
					object = scope:imprisonment_target
				}
			}
			else_if = {
				limit = { has_imprisonment_reason = scope:imprisonment_target }
				custom_description = { 
					text = "add_opinion_imprison_reason_unusable"
					object = scope:imprisonment_target
				}
				if = {
					limit = { exists = scope:use_strife_not_tyranny }
					change_strife_opinion = medium_strife_gain
				}
				else = {
					consume_imprisonment_reasons = scope:imprisonment_target
				}
			}
			else = {
				add_tyranny = imprisonment_tyranny_gain
				if = {
					limit = { is_rightful_liege_of = scope:imprisonment_target }
					add_legitimacy = miniscule_legitimacy_loss

					save_scope_value_as = {
						name = illegal_imprisonment
						value = yes
					}
				}
				if = {
					limit = { exists = scope:retaliating_faction }
					scope:retaliating_faction = {
						imprisonment_retribution_start_faction_war_if_valid = yes
					}
				}
			}
		}
	}
}

# OLD_IMPRISONER (character)
# NEW_IMPRISONER (character)
# TARGET (character)
change_imprisoner_consequences_war_effect = {
	$OLD_IMPRISONER$ = { save_temporary_scope_as = old_imprisoner }
	$NEW_IMPRISONER$ = { save_temporary_scope_as = new_imprisoner }
	$TARGET$ = { save_temporary_scope_as = imprisonment_target }

	## Create a war participant list for wars including both the prisoner and new_imprisoner
	hidden_effect = {
		scope:imprisonment_target = {
			if = {
				limit = { is_at_war_with = scope:new_imprisoner }
				every_character_war = {
					limit = { is_participant = scope:new_imprisoner }
					every_war_participant = {
						limit = {
							NOT = { scope:imprisonment_target = this }
							NOT = { scope:old_imprisoner = this } 
							NOT = { scope:new_imprisoner = this } 
						}
						if = {
							limit = {
								is_at_war_with = scope:new_imprisoner
								NOT = { is_allied_in_war = scope:new_imprisoner } 
							}
							add_to_temporary_list = prisoner_war_ally_list
						}
						else = {
							add_to_temporary_list = prisoner_war_enemy_list
						}
					}
				}
			}
		}
	}

	scope:imprisonment_target = {
		if = {
			limit = { is_at_war_with = scope:new_imprisoner }
			if = {
				limit = { any_character_war = { is_war_leader = prev } }
				custom_description = {
					text = "change_imprisoner_war_leader_tooltip"
					subject = this
					object = scope:new_imprisoner
				}
				add_opinion = {
					target = scope:old_imprisoner
					modifier = supported_my_enemy_opinion
					opinion = -50
				}
			}
			else = {
				custom_description = {
					text = "change_imprisoner_war_tooltip"
					subject = this
					object = scope:new_imprisoner
				}
				add_opinion = {
					target = scope:old_imprisoner
					modifier = supported_my_enemy_opinion
				}
			}
			if = {
				limit = {
					any_in_list = {
						list = prisoner_war_ally_list
						count > 0
					}
				}
				every_in_list ={
					list = prisoner_war_ally_list
					custom = all_war_allies
					if = {
						limit = {
							any_character_war = {
								is_war_leader = scope:imprisonment_target
							}
						}
						add_opinion = {
							target = scope:old_imprisoner
							modifier = supported_my_enemy_opinion
							opinion = -50
						}
					}
					else = {
						add_opinion = {
							target = scope:old_imprisoner
							modifier = supported_my_enemy_opinion
						}
					}
				}
			}
		}
	}

	scope:new_imprisoner = {
		if = {
			limit = { is_at_war_with = scope:imprisonment_target }
			if = {
				limit = { any_character_war = { is_war_leader = prev } }
				custom_description = {
					text = "change_imprisoner_war_leader_tooltip"
					subject = this
					object = scope:imprisonment_target
				}
				if = {
					limit = { is_ai = no }
					hidden_effect = {
						add_opinion = {
							target = scope:old_imprisoner
							modifier = supported_my_war_opinion
							opinion = 40
						}
					}
				}
				else = {
					add_opinion = {
						target = scope:old_imprisoner
						modifier = supported_my_war_opinion
						opinion = 40
					}
				}
			}
			else = {
				custom_description = {
					text = "change_imprisoner_war_tooltip"
					subject = this
					object = scope:imprisonment_target
				}
				if = {
					limit = { is_ai = no }
					hidden_effect = {
						add_opinion = {
							target = scope:old_imprisoner
							modifier = supported_my_war_opinion
						}
					}
				}
				else = {
					add_opinion = {
						target = scope:old_imprisoner
						modifier = supported_my_war_opinion
					}
				}
			}
			if = {
				limit = {
					any_in_list = {
						list = prisoner_war_enemy_list
						count > 0
					}
				}
				every_in_list ={
					list = prisoner_war_enemy_list
					custom = all_war_allies
					if = {
						limit = {
							any_character_war = {
								is_war_leader = scope:imprisonment_target
							}
						}
						add_opinion = {
							target = scope:old_imprisoner
							modifier = supported_my_war_opinion
							opinion = 40
						}
					}
					else = {
						add_opinion = {
							target = scope:old_imprisoner
							modifier = supported_my_war_opinion
						}
					}
				}
			}
		}
	}

	scope:old_imprisoner = {
		if = {
			limit = { is_at_war_with = scope:imprisonment_target }
			if = {
				limit = { any_character_war = { is_war_leader = prev } }
				custom_description = {
					text = "change_imprisoner_war_leader_tooltip"
					subject = this
					object = scope:imprisonment_target
				}
			}
			else = {
				custom_description = {
					text = "change_imprisoner_war_tooltip"
					subject = this
					object = scope:imprisonment_target
				}
			}
		}
	}
}
##############################
## GM1 scripted_effects list
##############################

# effects:
## transfer_imprisonment_attempt_character_effect						- Applies stress and dread modifiers, escalates rivalry, and disbands any schemes by the imprisoner against the imprisoned.
## transfer_imprisonment_character_effect
## change_imprisoner_effect 											- Assigns a new imprisoner to the imprisoned character, create memories, and applies modifiers to all involved parties.
## change_imprisoner_relatives_effect									- Applies opinion modifiers from the imprisoned family members to either the previous or next imprisoner.
## change_imprisoner_lovers_effect										- Initiates an event to break up lovers for either the previous or next imprisoner if the
## transfer_imprisonment_prisoner_is_at_war_with_effect					- Applies opinion modifiers to all war participants involved in the war between the imprisonment target and the next imprisoner, if such a war exists.
## transfer_imprisonment_prisoner_is_vassal_of_effect					- Applies tyranny modifiers to either the previous or next imprisoner if the imprisonment target is their vassal.
## transfer_imprisonment_vassal_effect
## transfer_imprisonment_prisoner_is_head_of_faith_of_effect			- Applies piety level modifiers to the imprisoner if the imprisoned is their Head of Faith.
## transfer_imprisonment_head_of_faith_effect
## transfer_imprisonment_imprisoner_stress_effect						- Applies stress modifiers to either the previous or next imprisoner.
## transfer_imprisonment_stress_effect
## transfer_imprisonment_imprisoner_dread_effect						- Applies dread modifiers to either the previous or next imprisoner.
## transfer_imprisonment_dread_effect
									
##############################
## GM1 scripted_effects
##############################

#------------------------------
# imprisonment-related
#------------------------------

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
# based on ./common/scripted_effects/00_prison_effects.txt/imprison_attempt_escalates_rivalry_effect
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
transfer_imprisonment_attempt_character_effect = {
	$TARGET$ = {
		if = {
			limit = {
				NOT = { has_relation_rival = imprisoner }
				OR = {
					$IMPRISONER$ = { is_at_war_with = $TARGET$ }
					has_requested_excommunication_by = { WHO = imprisoner }
					has_opinion_modifier = {
						modifier = revoked_title
						target = imprisoner
					}
				}
			}
			hidden_effect = {
				if = {
					limit = { has_relation_potential_rival = imprisoner }
					remove_relation_potential_rival = imprisoner
				}
			}
			set_relation_rival = imprisoner
		}
		else = {
			hidden_effect = {
				progress_towards_rival_effect = {
					CHARACTER = imprisoner
					REASON = rival_imprisoned
					OPINION = 0
				}
			}
		}

		imprisoner = {
			disband_all_schemes_effect = {
				WHO = this
				TARGET = $TARGET$
			}		
		}
	}

	$IMPRISONER$ = {
		disband_all_schemes_effect = {
			WHO = this
			TARGET = $TARGET$
		}		
	}

	transfer_imprisonment_imprisoner_stress_effect = {
		TARGET = $TARGET$
		PREV_IMPRISONER = $TARGET$.imprisoner
		NEXT_IMPRISONER = $IMPRISONER$
	}

	transfer_imprisonment_imprisoner_dread_effect = {
		TARGET = $TARGET$
		PREV_IMPRISONER = $TARGET$.imprisoner
		NEXT_IMPRISONER = $IMPRISONER$
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## CURR_IMPRISONER (character)
## NEXT_IMPRISONER (character)
transfer_imprisonment_character_effect = {
	$TARGET$ = { save_scope_as = imprisonment_target }
	$TARGET$.imprisoner = { save_scope_as = prev_imprisoner }
	$IMPRISONER$ = { save_scope_as = next_imprisoner }

	change_imprisoner_effect = { 
		TARGET = scope:imprisonment_target 
		CURR_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transfer_imprisonment_prisoner_is_at_war_with_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transfer_imprisonment_prisoner_is_vassal_of_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}

	transfer_imprisonment_prisoner_is_head_of_faith_of_effect = {
		TARGET = scope:imprisonment_target
		PREV_IMPRISONER = scope:prev_imprisoner
		NEXT_IMPRISONER = scope:next_imprisoner
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## CURR_IMPRISONER (character)
## NEXT_IMPRISONER (character)
change_imprisoner_effect = {
	$TARGET$ = {
		create_character_memory = {
			type = transfer_imprisonment_prisoner_memory
			participants = {
				previous_imprisoner = $CURR_IMPRISONER$
				current_imprisoner = $NEXT_IMPRISONER$
			}
		}
	}

	$CURR_IMPRISONER$ = {
		create_character_memory = {
			type = transfer_imprisonment_previous_imprisoner_memory
			participants = {
				imprisoned = $TARGET$
				imprisoner = $NEXT_IMPRISONER$
			}
		}
	}

	$NEXT_IMPRISONER$ = {
		create_character_memory = {
			type = transfer_imprisonment_current_imprisoner_memory
			participants = {
				imprisoned = $TARGET$
				imprisoner = $CURR_IMPRISONER$
			}
		}
	}

	$TARGET$ = {
		## We won't change the original vanilla on_release_from_prison in on_action.
		## Instead we'll make use of the existing escaped_from_prison_flag.
		## * Remove when changed or if there's a better way to implement this.

		## What technically happens when you "escaped_from_prison"?
		## - Prevents release_from_prison_memory from being created.
		## - Changes imprisoned_me to imprisoned_me_past opinion modifier. (* This doesn't even work for some reason?)

		if = {
			limit = { has_character_modifier = allowed_to_go_outside }
			remove_character_modifier = allowed_to_go_outside
		}
		if = {
			limit = { has_character_modifier = moldy_gruel_diet }
			remove_character_modifier = moldy_gruel_diet
		}
		
		add_character_flag = {
			flag = escaped_from_prison_flag
			days = 1
		}
	
		add_character_flag = {
			flag = block_for_prison_release_notification
			days = 1
		}
	
		custom_description = {
			text = RELEASES_PRISONER_TOOLTIP_EFFECT
			subject = $CURR_IMPRISONER$
			object = $TARGET$
			if = {
				limit = {
					has_opinion_modifier = {
						modifier = imprisoned_me
						target = $CURR_IMPRISONER$
					}
				}
				remove_opinion = {
					modifier = imprisoned_me
					target = $CURR_IMPRISONER$
				}
			}
			add_opinion = {
				modifier = imprisoned_me_past
				target = $CURR_IMPRISONER$
			}
			release_from_prison = yes
		}

		custom_description_no_bullet = {
			text = MOVES_PRISON_TOOLTIP_EFFECT
			$CURR_IMPRISONER$ = {
				if = {
					limit = { has_imprisonment_reason = $TARGET$ }
					consume_imprisonment_reason = $TARGET$
				}
			}
		}

		custom_description_no_bullet = {
			text = IMPRISON_PRISONER_TOOLTIP_EFFECT
			subject = $NEXT_IMPRISONER$
			object = $TARGET$
			if = {
				limit = {
					exists = liege
					OR = {
						is_landed = yes
						is_close_or_extended_family_of = liege
						is_spouse_of = liege
					}
				}
				$NEXT_IMPRISONER$ = {
					imprison = {
						target = $TARGET$
						type = house_arrest
					}
				}
			}
			else = {
				$NEXT_IMPRISONER$ = {
					imprison = {
						target = $TARGET$
						type = dungeon
					}
				}
			}
		}
	}

	$TARGET$ = {
		## imprisonment_target opinion towards their previous imprisoner.
		## They'd rather not be with their previous imprisoner if they are a PoS.
		if = {
			limit = {
				NOT = { $NEXT_IMPRISONER$ = { is_at_war_with = $TARGET$ } }
				is_head_of_faith_of = { WHO = $NEXT_IMPRISONER$ }
				OR = {
					has_character_modifier = recently_tortured
					has_character_modifier = recently_blinded
					has_character_modifier = recently_castrated
					$CURR_IMPRISONER$ = {
						NOR = { 
							has_trait = sadistic
							has_trait = callous
							has_trait = arbitrary
							has_trait = wrathful
							has_trait = vengeful
							has_trait = deceitful
						} 
					}
				}
			}
			add_opinion = {
				modifier = transferred_me
				target = $CURR_IMPRISONER$
			}
			## imprisonment_target opinion towards next_imprisoner.
		}
		add_opinion = {
			modifier = imprisoned_me
			target = $NEXT_IMPRISONER$
		}
	}

	change_imprisoner_relatives_effect = {
		TARGET = $TARGET$
		PREV_IMPRISONER = $CURR_IMPRISONER$
		NEXT_IMPRISONER = $NEXT_IMPRISONER$
	}

	change_imprisoner_lovers_effect = {
		TARGET = $TARGET$
		PREV_IMPRISONER = $CURR_IMPRISONER$
		NEXT_IMPRISONER = $NEXT_IMPRISONER$
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
change_imprisoner_relatives_effect = {
	$TARGET$ = {
		# relatives opinion towards previous imprisoner
		if = {
			limit = { 
				any_close_or_extended_family_member = { 
					count >= 1
					NOT = { $NEXT_IMPRISONER$ = this } 
					NOT = { $PREV_IMPRISONER$ = this }
				} 
			}
			custom_description = {
				text = TRANSFER_IMPRISONMENT_RELATIVES_EFFECT_TOOLTIP
				subject = $TARGET$
				object = $PREV_IMPRISONER$
				every_close_or_extended_family_member = {
					limit = {
						OR = {
							NOT = { $NEXT_IMPRISONER$ = this } 
							NOT = { $PREV_IMPRISONER$ = this } 
						}
					}
					add_opinion = {
						modifier = transferred_family_member
						target = $PREV_IMPRISONER$
					}
				}
			}
		}
	
		# relatives opinion towards next imprisoner
		if = {
			limit = { 
				any_close_or_extended_family_member = { 
					count >= 1
					NOT = { $PREV_IMPRISONER$ = this }
					NOT = { $NEXT_IMPRISONER$ = this } 
				} 
			}
			if = {
				limit = { is_in_prison_type = house_arrest }
				custom_description = {
					text = TRANSFER_IMPRISONMENT_RELATIVES_EFFECT_TOOLTIP_HOUSE_ARREST
					subject = $TARGET$
					object = $NEXT_IMPRISONER$
					every_close_or_extended_family_member = {
						limit = {
							NOT = { $PREV_IMPRISONER$ = this }
							NOT = { $NEXT_IMPRISONER$ = this } 
						}
						add_opinion = {
							modifier = imprisoned_family_member
							target = $NEXT_IMPRISONER$
						}
					}
				}
			}
			else_if = {
				limit = { is_in_prison_type = dungeon }
				custom_description = {
					text = TRANSFER_IMPRISONMENT_RELATIVES_EFFECT_TOOLTIP_DUNGEON
					subject = $TARGET$
					object = $NEXT_IMPRISONER$
					every_close_or_extended_family_member = {
						limit = {
							NOT = { $PREV_IMPRISONER$ = this }
							NOT = { $NEXT_IMPRISONER$ = this } 
						}
						add_opinion = {
							modifier = imprisoned_family_member_dungeon
							target = $NEXT_IMPRISONER$
						}
					}
				}
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_character_effect
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
change_imprisoner_lovers_effect = {
	$TARGET$ = {
		if = {
			limit = {
				has_relation_lover = $PREV_IMPRISONER$
				NOT = { has_relation_rival = $PREV_IMPRISONER$ }
			}
			trigger_event = {
				id = lover.0101
				days = { 14 30 }
			}
		}

		if = {
			limit = {
				has_relation_lover = $NEXT_IMPRISONER$
				NOT = { has_relation_rival = $NEXT_IMPRISONER$ }
			}
			trigger_event = {
				id = lover.0101
				days = { 14 30 }
			}
		}
	}
}

# TARGET (character)
# PREV_IMPRISONER (character)
# NEXT_IMPRISONER (character)
transfer_imprisonment_prisoner_is_at_war_with_effect = {
	$TARGET$ = {
		every_character_war = {
			limit = {
				any_war_participant = { 
					$NEXT_IMPRISONER$ = this
					$NEXT_IMPRISONER$ = {
						NOT = { is_allied_in_war = $TARGET$ }
						NOT = { is_allied_in_war = $PREV_IMPRISONER$ }
					}
				}
			}

			custom_description_no_bullet = {
				text = TRANSFER_IMPRISONMENT_AT_WAR_TOOLTIP_EFFECT
				subject = $TARGET$
				object = $NEXT_IMPRISONER$
			}

			custom_description_no_bullet = {
				text = TRANSFER_IMPRISONMENT_AT_WAR_TOOLTIP_EFFECT
				subject = $NEXT_IMPRISONER$ 
				object = $TARGET$
			}

			if = {
				limit = { is_leader_in_war = $TARGET$ }

				custom_description_no_bullet = {
					text = TRANSFER_IMPRISONMENT_WAR_LEADER_TOOLTIP_EFFECT
					subject = $TARGET$ 
				}

				if = {
					limit = {
						any_war_participant = {
							count >= 1
							NOT = { $TARGET$ = this }
							NOT = { $PREV_IMPRISONER$ = this } 
							NOT = { $NEXT_IMPRISONER$ = this } 
							is_allied_in_war = $TARGET$
						}
					}

					## allies' opinion towards previous imprisoner
					custom_description = {
						text = TRANSFER_IMPRISONMENT_ALLIES_LOSE_TOOLTIP_EFFECT_WAR_LEADER # IMPRISONMENT_ALLIES_LOSE_TRANSFER_EFFECT_WAR_LEADER_TT
						subject = $TARGET$
						object = $PREV_IMPRISONER$
						every_war_participant = {
							limit = {
								NOT = { $TARGET$ = this }
								NOT = { $PREV_IMPRISONER$ = this } 
								NOT = { $NEXT_IMPRISONER$ = this } 
								is_allied_in_war = $TARGET$
							}
							add_opinion = {
								modifier = supported_my_enemy_opinion
								target = $PREV_IMPRISONER$
								opinion = -50
							}
						}
					}
				}

				if = {
					limit = {
						any_war_participant = {
							count >= 1
							NOT = { $TARGET$ = this }
							NOT = { $PREV_IMPRISONER$ = this } 
							NOT = { $NEXT_IMPRISONER$ = this } 
							is_allied_in_war = $NEXT_IMPRISONER$
						}
					}

					## enemies' opinion towards previous imprisoner
					custom_description = {
						text = TRANSFER_IMPRISONMENT_ALLIES_GAIN_TOOLTIP_EFFECT_WAR_LEADER
						subject = $NEXT_IMPRISONER$
						object = $PREV_IMPRISONER$
						every_war_participant = {
							limit = {
								NOT = { $TARGET$ = this }
								NOT = { $PREV_IMPRISONER$ = this } 
								NOT = { $NEXT_IMPRISONER$ = this } 
								is_allied_in_war = $NEXT_IMPRISONER$
							}
							add_opinion = {
								modifier = supported_my_war_opinion
								target = $PREV_IMPRISONER$
								opinion = 40
							}
						}
					}
				}

				$NEXT_IMPRISONER$ = {
					add_opinion = {
						modifier = supported_my_war_opinion
						target = $PREV_IMPRISONER$
						opinion = 40
					}
				}
			}
			else_if = {
				limit = { NOT { is_leader_in_war = $TARGET$ } }
				if = {
					limit = {
						any_war_participant = {
							count >= 1
							NOT = { $TARGET$ = this }
							NOT = { $PREV_IMPRISONER$ = this } 
							NOT = { $NEXT_IMPRISONER$ = this } 
							is_allied_in_war = $TARGET$
						}
					}

					## allies' opinion towards previous imprisoner
					custom_description = {
						text = TRANSFER_IMPRISONMENT_ALLIES_LOSE_TOOLTIP_EFFECT
						subject = $TARGET$
						object = $PREV_IMPRISONER$
						every_war_participant = {
							limit = {
								NOT = { $TARGET$ = this }
								NOT = { $PREV_IMPRISONER$ = this } 
								NOT = { $NEXT_IMPRISONER$ = this } 
								is_allied_in_war = $TARGET$
							}
							add_opinion = {
								modifier = supported_my_enemy_opinion
								target = $PREV_IMPRISONER$
							}
						}
					}
				}

				if = {
					limit = {
						any_war_participant = {
							count >= 1
							NOT = { $TARGET$ = this }
							NOT = { $PREV_IMPRISONER$ = this } 
							NOT = { $NEXT_IMPRISONER$ = this } 
							is_allied_in_war = $NEXT_IMPRISONER$
						}
					}

					## enemies' opinion towards previous imprisoner
					custom_description = {
						text = TRANSFER_IMPRISONMENT_ALLIES_GAIN_TOOLTIP_EFFECT
						subject = $NEXT_IMPRISONER$
						object = $PREV_IMPRISONER$
						every_war_participant = {
							limit = {
								NOT = { $TARGET$ = this }
								NOT = { $PREV_IMPRISONER$ = this } 
								NOT = { $NEXT_IMPRISONER$ = this } 
								is_allied_in_war = $NEXT_IMPRISONER$
							}
							add_opinion = {
								modifier = supported_my_war_opinion
								target = $PREV_IMPRISONER$
							}
						}
					}
				}

				$NEXT_IMPRISONER$ = {
					add_opinion = {
						modifier = supported_my_war_opinion
						target = $PREV_IMPRISONER$
					}
				}
			}

			$TARGET$ = {
				add_opinion = {
					modifier = supported_my_enemy_opinion
					target = $PREV_IMPRISONER$
					opinion = -50
				}
			}
		}
	}

	# tooltip for sadistic roleplayers
	$PREV_IMPRISONER$ = {
		if = {
			limit = { is_at_war_with = $TARGET$	}
			custom_description_no_bullet = {
				text = TRANSFER_IMPRISONMENT_AT_WAR_TOOLTIP_EFFECT
				subject = this
				object = $TARGET$
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_tyranny_effect
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
transfer_imprisonment_prisoner_is_vassal_of_effect = {
	## sending without any imprisonment_reason incurs tyranny.
	transfer_imprisonment_vassal_effect = {
		TARGET = $TARGET$
		IMPRISONER = $PREV_IMPRISONER$
	}
`
	## recieving without any imprisonment_reason incurs tyranny.
	transfer_imprisonment_vassal_effect = {
		TARGET = $TARGET$
		IMPRISONER = $NEXT_IMPRISONER$
	}
}

transfer_imprisonment_vassal_effect = {
	$IMPRISONER$ = {
		if = {
			limit = { $TARGET$.liege = prev }

			custom_description_no_bullet = {
				text = TRANSFER_IMPRISONMENT_VASSAL_TOOLTIP_EFFECT
				subject = $IMPRISONER$
				object = $TARGET$
			}

			if = {
				limit = { has_imprisonment_reason = $TARGET$ }
				custom_description_no_bullet = { 
					text = IS_ALLOWED_TO_TRANSFER_IMPRISONMENT_TOOLTIP_EFFECT
					subject = this
				}
			}
			else_if = {
				limit = { 
					is_at_war_with = $TARGET$ 
					NOT = { is_allied_in_war = $TARGET$ }
				}
				custom_description_no_bullet = {
					text = IS_ALLOWED_TO_TRANSFER_IMPRISONMENT_TOOLTIP_EFFECT_WAR
					subject = this
				}
			}
			else = { 
				add_tyranny_no_bullet = {
					VALUE = imprisonment_tyranny_gain
				}
			}
		}
	}
}

# based on ./common/scripted_effects/00_prison_effects.txt/imprison_HoF_consequences_effect
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
transfer_imprisonment_prisoner_is_head_of_faith_of_effect = {
	transfer_imprisonment_head_of_faith_effect = {
		TARGET = $TARGET$
		IMPRISONER = $PREV_IMPRISONER$
	}

	transfer_imprisonment_head_of_faith_effect = {
		TARGET = $TARGET$
		IMPRISONER = $NEXT_IMPRISONER$
	}

	$TARGET$ = {
		if = {
			limit = { 
				NOT = { $NEXT_IMPRISONER$.faith = $TARGET$.faith }	
			}
			add_opinion = {
				modifier = transferred_me_head_of_faith
				target = $PREV_IMPRISONER$
			}
		}
	}
}

transfer_imprisonment_head_of_faith_effect = {		
	$IMPRISONER$ = {
		if = {
			limit = { $TARGET$ = { is_head_of_faith_of = { WHO = $IMPRISONER$ } } }

			custom_description_no_bullet = {
				text = TRANSFER_IMPRISONMENT_HEAD_OF_FAITH_TOOLTIP_EFFECT
				subject = this
				object = $TARGET$
			}

			if = {
				limit = { has_imprisonment_reason = $TARGET$ }
				custom_description_no_bullet = { 
					text = IS_ALLOWED_TO_TRANSFER_IMPRISONMENT_TOOLTIP_EFFECT 
					subject = this
				}
			}
			else_if = {
				limit = { 
					is_at_war_with = $TARGET$ 
					NOT = { is_allied_in_war = $TARGET$ }
				}
				custom_description_no_bullet = {
					text = IS_ALLOWED_TO_TRANSFER_IMPRISONMENT_TOOLTIP_EFFECT_WAR 
					subject = this
				}
			}
			else = { 
				add_piety_level = -1
				add_piety = medium_piety_loss
			}
		}
	}
}

# based on ./common/character_interactions/00_prison_interactions.txt/imprison_interaction
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
transfer_imprisonment_imprisoner_stress_effect = {
	transfer_imprisonment_stress_effect = { 
		TARGET = $TARGET$
		IMPRISONER = $PREV_IMPRISONER$
	}
		
	transfer_imprisonment_stress_effect = { 
		TARGET = $TARGET$
		IMPRISONER = $NEXT_IMPRISONER$
	}
}

transfer_imprisonment_stress_effect = {
	 $IMPRISONER$ = {
		if = {
			limit = { has_imprisonment_reason = $TARGET$ }
			stress_impact = {
				compassionate = minor_stress_impact_gain
				forgiving = minor_stress_impact_gain
			}
		}
		else = {
			stress_impact = {
				just = medium_stress_impact_gain
				compassionate = medium_stress_impact_gain
			}
		}
	}
}

# based on ./common/scripted_effects/00_interaction_effects.txt/illegal_imprisonment_dread_effect
## TARGET (character)
## PREV_IMPRISONER (character)
## NEXT_IMPRISONER (character)
transfer_imprisonment_imprisoner_dread_effect = {
	transfer_imprisoned_dread_effect = {
		TARGET = $TARGET$
		IMPRISONER = $PREV_IMPRISONER$
	}

	transfer_imprisoned_dread_effect = {
		TARGET = $TARGET$
		IMPRISONER = $NEXT_IMPRISONER$
	}
}

transfer_imprisonment_dread_effect = {
	$IMPRISONER$ = {
		if = {
			limit = { NOT = { has_imprisonment_reason = $TARGET$ } }
			if = {
				limit = {
					$TARGET$ = {
						OR = {
							is_spouse_of = $IMPRISONER$
							is_close_family_of = $IMPRISONER$
							tier_or_related_liege_tier_greater_or_equal_trigger = { TIER = tier_kingdom }
						}
					}
				}
				add_dread = medium_dread_gain
			}
			else_if = {
				limit = {
					$TARGET$ = {
						OR = {
							tier_or_related_liege_tier_equal_trigger = { TIER = tier_duchy }
							tier_or_related_liege_tier_equal_trigger = { TIER = tier_county }
						}
					}
				}
				add_dread = minor_dread_gain
			}
		}
	}
}
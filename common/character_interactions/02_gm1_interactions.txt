##############################
## GM1 character_interactions
##############################

offer_prisoner_interaction = {
	common_interaction = no
	category = interaction_category_diplomacy
	icon = prison # icon_gold

	popup_on_receive = yes
	pause_on_receive = yes

	ai_maybe = yes
	ai_min_reply_days = 4
	ai_max_reply_days = 9

	desc = offer_prisoner_interaction_desc
	notification_text = OFFER_PRISONER_INTERACTION_PROPOSAL_NOTIFICATION_TEXT
	prompt = OFFER_PRISONER_INTERACTION_SELECT_TARGET

	cooldown_against_recipient = { years = 3 }

	is_shown = {
		# Cannot target oneself.
		NOT = { scope:recipient = scope:actor }
		# Only significant rulers are allowed to use this interaction.
		scope:actor.highest_held_title_tier > tier_barony
		scope:recipient.highest_held_title_tier > tier_barony
	}

	is_valid_showing_failures_only = {
		# Theocratic Governments are not allowed.
		NOT = { scope:actor = { government_has_flag = government_is_theocracy } }
		NOT = { scope:recipient = { government_has_flag = government_is_theocracy } }

		# Actor
		## Must be available.
		## Must not be imprisoned.
		## Must have prisoners
		## Must not be at war with the Recipient.
		scope:actor = { 
			is_busy_in_events_localised = yes
			is_imprisoned = no
			has_prisoners = yes 
		}
		
		# Recipient
		## Must be available.
		## Must not be imprisoned.
		scope:recipient = { 
			is_busy_in_events_localised = yes
			is_imprisoned = no 

			NOT = {
				is_at_war_with = scope:actor
			}
		}

		# AI
		## Stop AI from spamming already denied prisoner.
		trigger_if = {
			limit = {
				scope:actor = { is_ai = yes }
				exists = scope:secondary_actor
			}
			scope:secondary_actor = {
				NOT = { has_character_flag = offered_prisoner_already }
			}
		}
	}

	can_be_picked = {
		gm1_valid_for_transfer_prisoner_interaction_trigger = yes
	}

	can_send = {
		exists = scope:secondary_actor
		trigger_if = {
			limit = { scope:recipient = { is_ai = no } }
			scope:secondary_actor = {
				NOT = { has_character_flag = offered_prisoner_already }
			}
		}
		trigger_if = {
			limit = { scope:actor = { is_ai = yes }	}
			scope:secondary_actor = {
				has_recently_undergone_interaction = no # Enforce.
				OR = {
					scope:recipient = {
						NOT = {
							likes_character_trigger = {
								CHARACTER = prev
							}
						}
					}
					has_any_bad_relationship_with_character_trigger = {
						CHARACTER = scope:recipient
					}
					has_any_worst_bad_relationship_with_character_trigger = {
						CHARACTER = scope:recipient
					}
				}
				OR = {
					has_any_relation_trigger = {
						CHARACTER = scope:recipient
					}
					is_of_major_or_minor_interest_trigger = {
						CHARACTER = scope:recipient
					}
				}
				## Don't bother with insignificant fucks.
				has_no_real_status_trigger = no
				has_no_particular_noble_roots_trigger = no
			}
		}
		custom_description = {
			text = "is_allies_with_target_trigger"
			subject = scope:actor
			object = scope:recipient
			NAND = {
				scope:actor = { is_allied_in_war = scope:recipient }
				scope:recipient = { is_at_war_with = scope:secondary_actor }
			}
		}
	}

	populate_actor_list = {
		scope:actor = {
			every_prisoner = {
				limit = { 
					NOT = { scope:recipient = this }
					gm1_valid_for_transfer_prisoner_interaction_trigger_basic = {
						SENDER = scope:actor
					}
				}
				add_to_list = characters
			}
		}
	}

	localization_values = {
		VERY_HIGH_BARTER_COST = scope:secondary_actor.highly_increased_barter_cost_value
		HIGH_BARTER_COST = scope:secondary_actor.increased_barter_cost_value
		MEDIUM_BARTER_COST = scope:secondary_actor.slightly_increased_barter_cost_value
		BARTER_COST = scope:secondary_actor.barter_cost_value
		CURRENT_GOLD = scope:recipient.gold
	}

	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor ?= { 
				is_at_war_with = scope:recipient
			}
			scope:actor = {
				exists = dynasty
				dynasty = { has_dynasty_perk = fp1_pillage_legacy_3	}
			}
			scope:recipient = {
				gold >= scope:secondary_actor.highly_increased_barter_cost_value
			}
		}

		flag = very_high_gold
		localization = "BARTER_OPTION_VERY_HIGH_GOLD"
	}

	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor ?= { 
				is_at_war_with = scope:recipient
			}
			scope:actor = {
				exists = dynasty
				dynasty = { has_dynasty_perk = fp1_pillage_legacy_3	}
			}
			scope:recipient = {
				gold < scope:secondary_actor.highly_increased_barter_cost_value
				gold >= 1
			}
		}

		flag = very_high_current_gold
		localization = "BARTER_OPTION_VERY_HIGH_GOLD_CURRENT"
	}

	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor ?= { 
				is_at_war_with = scope:recipient 
			}
			scope:actor = {
				OR = {
					is_lowborn = yes
					NOT = { dynasty = {	has_dynasty_perk = fp1_pillage_legacy_3	} }
				}
			}
			scope:recipient = {
				gold >= scope:secondary_actor.increased_barter_cost_value
			}
		}

		flag = high_gold
		localization = "BARTER_OPTION_HIGH_GOLD"
	}

	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor ?= { 
				is_at_war_with = scope:recipient
			}
			scope:actor = {
				OR = {
					is_lowborn = yes
					NOT = { dynasty = {	has_dynasty_perk = fp1_pillage_legacy_3	} }
				}
			}
			scope:recipient = {
				gold < scope:secondary_actor.increased_barter_cost_value
				gold >= 1
			}
		}

		flag = high_current_gold
		localization = "BARTER_OPTION_HIGH_GOLD_CURRENT"
	}

	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor ?= { 
				NOT = { is_at_war_with = scope:recipient } 
			}
			scope:actor = {
				exists = dynasty
				dynasty = { has_dynasty_perk = fp1_pillage_legacy_3	}
			}
			scope:recipient = {
				gold >= scope:secondary_actor.slightly_increased_barter_cost_value
			}
		}

		flag = medium_gold
		localization = "BARTER_OPTION_MEDIUM_GOLD"
	}

	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor ?= { 
				NOT = { is_at_war_with = scope:recipient } 
			}

			scope:actor = {
				exists = dynasty
				dynasty = { has_dynasty_perk = fp1_pillage_legacy_3	}
			}
			scope:recipient = {
				gold < scope:secondary_actor.slightly_increased_barter_cost_value
				gold >= 1
			}
		}

		flag = medium_current_gold
		localization = "BARTER_OPTION_MEDIUM_GOLD_CURRENT"
	}

	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor ?= { 
				NOT = { is_at_war_with = scope:recipient } 
			}
			scope:actor = {
				OR = {
					is_lowborn = yes
					NOT = { dynasty = {	has_dynasty_perk = fp1_pillage_legacy_3	} }
				}
			}
			scope:recipient = {
				gold >= scope:secondary_actor.barter_cost_value
			}
		}

		flag = gold
		localization = "BARTER_OPTION_GOLD"
	}

	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor ?= { 
				NOT = { is_at_war_with = scope:recipient } 
			}
			scope:actor = {
				OR = {
					is_lowborn = yes
					NOT = { dynasty = {	has_dynasty_perk = fp1_pillage_legacy_3	} }
				}
			}
			scope:recipient = {
				gold < scope:secondary_actor.barter_cost_value
				gold >= 1
			}
		}

		flag = current_gold
		localization = "BARTER_OPTION_GOLD_CURRENT"
	}

	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor ?= {
				OR = {
					is_at_war_with = scope:recipient
					any_held_title = {
						tier >= tier_kingdom
						custom_tooltip = { 
							# Workaround just to mute this specific localization error. 
							# Why does it have to be designed this way?
							scope:recipient = { has_strong_claim_on = prev }
							text = DEBUG_COLON
						}
					}
				}
			}
		}

		is_valid = {
			## Modifier is already tapped out at this point.
			custom_tooltip = {
				NOR = {
					scope:very_high_gold ?= yes
					scope:medium_gold ?= yes
					scope:high_gold ?= yes
					scope:gold ?= yes
				}
				text = "maximum_opinion_reached"
			}
			scope:actor = {
				can_add_hook = {
					target = scope:recipient
					type = loyalty_hook
				}
			}
		}

		flag = strong_hook
		localization = "BARTER_OPTION_FAVOR"
	}

	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			scope:secondary_actor ?= {
				NOR = {
					is_at_war_with = scope:recipient
					any_held_title = {
						tier >= tier_kingdom
						custom_tooltip = { 
							# Workaround just to mute this specific localization error. 
							# Why does it have to be designed this way?
							scope:recipient = { has_strong_claim_on = prev }
							text = DEBUG_COLON
						}
					}
				}
			}
		}

		is_valid = {
			## Modifier is already tapped out at this point.
			custom_tooltip = {
				NOR = {
					scope:very_high_gold ?= yes
					scope:medium_gold ?= yes
					scope:high_gold ?= yes
					scope:gold ?= yes
				}
				text = "maximum_opinion_reached"
			}
			scope:actor = {
				can_add_hook = {
					target = scope:recipient
					type = favor_hook
				}
			}
		}

		flag = favor
		localization = "BARTER_OPTION_FAVOR"
	}

	send_options_exclusive = no

	on_send = {
		hidden_effect = {
			scope:secondary_actor = {
				add_character_flag = {
					flag = under_transfer_prisoner_interaction
					months = 3
				}
				if = {
					limit = { scope:recipient = { is_ai = no } }
					add_character_flag = {
						flag = offered_prisoner_already
						years = 3
					}
				}
			}
		}
	}

	on_accept = {
		if = {
			limit = { debug_only = yes }
			debug_log = "GM1 - Initiated Offer Prisoner Interaction"
		}
		
		transfer_prisoner_interaction_effect = {
			PRISONER = scope:secondary_actor
			SENDER = scope:actor
			RECEIVER = scope:recipient
		}

		## Notification Event.
		scope:actor = {
			trigger_event = gm1_interaction.0016
		}

		transfer_prisoner_interaction_payment_effect = {
			PRISONER = scope:secondary_actor
			SENDER = scope:actor
			RECEIVER = scope:recipient
		}

		## Clan Unity.
		scope:actor = {
			if = {
				limit = {
					government_has_flag = government_is_clan
					house = scope:recipient.house
				}
				add_clan_unity_interaction_effect = {
					CHARACTER = scope:actor
					TARGET = scope:recipient
					VALUE = medium_unity_loss
					DESC = clan_unity_hostage.desc
					REVERSE_NON_HOUSE_TARGET = no
				}
			}
		}
	}

	on_decline = {	
		## Notification Event.
		scope:actor = {
			trigger_event = gm1_interaction.0012 
		}

		## Prevent concurrencies
		scope:secondary_actor = {
			if = {
				limit = { has_character_flag = under_transfer_prisoner_interaction  }
				remove_character_flag = under_transfer_prisoner_interaction
			}
		}
	
	}

	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = liege
	}

	ai_frequency = 6

	ai_potential = { highest_held_title_tier >= tier_county }

	ai_accept = {
		base = 0

		## Receiver's Personality
		gm1_offer_prisoner_interaction_personality_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
			PRISONER = scope:secondary_actor
		}

		## Modifiers towards the initiator.
		### How much does the receiver think about the sender? (Halved)
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		### Receiver accepts less if they are not tribal while the sender is.
		gm1_transfer_prisoner_interaction_government_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Receiver accepts based on diplomatic relations with the sender.
		gm1_transfer_prisoner_interaction_realm_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Receiver accepts less if different culture with the sender.
		gm1_transfer_prisoner_interaction_culture_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Receiver accepts less if different faith with the sender.
		gm1_transfer_prisoner_interaction_faith_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Receiver accepts based on personal relations with the sender.
		gm1_transfer_prisoner_interaction_relation_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Receiver accepts based on sender dread levels.
		gm1_transfer_prisoner_interaction_dread_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
		}
		gm1_transfer_prisoner_interaction_perk_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
			PRISONER = scope:secondary_actor
		}
		### Receiver accepts based on traits.
		gm1_transfer_prisoner_interaction_trait_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}

		## Modifiers towards the Prisoner.
		### How much does the receiver think about the prisoner? (Halved)
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:secondary_actor
			multiplier = -0.5
			desc = AI_OPINION_REASON
		}
		### Receiver will gladly accept if at war with the prisoner.
		modifier = {
			scope:recipient = {  
				is_at_war_with = scope:secondary_actor
			}
			add = 500
			desc = INTERACTION_AI_PRISONER_REASON_WAR_AGAINST
		}
		### Receiver is scared to accept powerful prisoners.
		gm1_transfer_prisoner_interaction_prisoner_relative_strength_modifier = {
			WHO = scope:recipient
			PRISONER = scope:secondary_actor
		}
		### Receiver accepts more if they have claims against the prisoner.
		gm1_transfer_prisoner_interaction_claims_casus_bellis_modifier_gain = {
			WHO = scope:recipient
			PRISONER = scope:secondary_actor
		}
		### Receiver accepts less if different culture with the prisoner.
		gm1_transfer_prisoner_interaction_prisoner_faith_modifier = {
			WHO = scope:recipient
			PRISONER = scope:secondary_actor
		}
		### Receiver accepts less if the prisoner is their vassal and without imprisonment reason.
		gm1_transfer_prisoner_interaction_prisoner_realm_modifier = {
			WHO = scope:recipient
			PRISONER = scope:secondary_actor
		}
		### Receiver accepts based on personal relations with the prisoner.
		gm1_offer_prisoner_interaction_prisoner_relation_modifier = {
			WHO = scope:recipient
			PRISONER = scope:secondary_actor
		}
		### Does the receiver think this trade is worth it compared to a straight up ransom?
		modifier = {
			exists = scope:secondary_actor
			add = {
				value = 0
				#### Gold Option
				add = {
					if = {
						limit = { scope:very_high_gold ?= yes }
						value = scope:secondary_actor.highly_increased_barter_cost_value
					}
					else_if = {
						limit = { scope:medium_gold ?= yes }
						value = scope:secondary_actor.slightly_increased_barter_cost_value
					}
					else_if = {
						limit = { scope:high_gold ?= yes }
						value = scope:secondary_actor.increased_barter_cost_value
					}
					else_if = {
						limit = { scope:gold ?= yes }
						value = scope:secondary_actor.barter_cost_value
					}
					else_if = {
						limit = { 
							OR = {
								scope:very_high_current_gold ?= yes
								scope:high_current_gold ?= yes
								scope:medium_current_gold ?= yes
								scope:current_gold ?= yes
							}
						}
						value = scope:recipient.current_gold_value
					}
				}
				### Hook Option
				add = {
					if = {
						limit = { scope:strong_hook ?= yes }
						value = scope:recipient.golden_obligation_value
						multiply = 2
					}
					else_if = {
						limit = { scope:favor ?= yes }
						value = scope:recipient.golden_obligation_value
					}
				}
				divide = {
					value = interaction_actor_prisoner_value
					min = 1
				}
				subtract = 1
				multiply = -100
				max = 100
				min = -100
			}
			desc = INTERACTION_AI_PRISONER_REASON_APPROVAL
		}
	}

	ai_will_do = {
		base = 0

		## On rare occasions, the cummulative opinion modifiers outweigh the
		## prisoner's value - meaning the AI will give the prisoner for FREE.
		## Force this idiot to have at least one minimum option selected.
		modifier = {
			AND = {
				scope:very_high_gold ?= no
				scope:high_gold ?= no
				scope:medium_gold ?= no
				scope:gold ?= no
				scope:very_high_current_gold ?= no
				scope:high_current_gold ?= no
				scope:medium_current_gold ?= no
				scope:current_gold ?= no
				scope:strong_hook ?= no
				scope:favor ?= no
			}
			add = -1000
		}

		### AI will not send if they are at war with the prisoner.
		modifier = {
			scope:actor = { is_at_war_with = scope:secondary_actor }
			add = -500
		}
		### AI will send if receiver is at war with the prisoner.
		modifier = {
			scope:actor = {
				NOT = { is_at_war_with = scope:secondary_actor }
			}
			scope:recipient = {  
				is_at_war_with = scope:secondary_actor
			}
			add = 500
		}

		## AI will barter their prisoners more for a higher value if they are tribal
		modifier = {
			government_has_flag = government_is_tribal
			add = 100
		}

		## AI's Personality
		gm1_offer_prisoner_interaction_personality_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
			PRISONER = scope:secondary_actor
		}

		## Modifiers towards the receiver.
		### How much does the AI think about the receiver? (Halved)
		opinion_modifier = {
			who = scope:actor
			opinion_target = scope:recipient
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		### AI sends based on diplomatic relations with the receiver.
		gm1_transfer_prisoner_interaction_realm_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
		}
		### AI sends less if different culture with the receiver.
		gm1_transfer_prisoner_interaction_culture_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
		}
		### AI sends less if different faith with the receiver.
		gm1_transfer_prisoner_interaction_faith_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
		}
		### AI sends based on personal relations with the receiver.
		gm1_transfer_prisoner_interaction_relation_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
		}
		### AI sends based on receiver dread levels.
		gm1_transfer_prisoner_interaction_dread_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### AI sends based on perks.
		gm1_transfer_prisoner_interaction_perk_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
			PRISONER = scope:secondary_actor
		}
		### AI sends based on traits.
		gm1_transfer_prisoner_interaction_trait_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}

		## Modifiers towards the Prisoner.
		### How much does the AI think about the prisoner? (Halved)
		opinion_modifier = {
			who = scope:actor
			opinion_target = scope:secondary_actor
			multiplier = -0.5
			desc = AI_OPINION_REASON
		}
		### AI is scared to send powerful prisoners.
		gm1_transfer_prisoner_interaction_prisoner_relative_strength_modifier = {
			WHO = scope:actor
			PRISONER = scope:secondary_actor
		}
		### AI sends less if they have claims against the prisoner.
		gm1_transfer_prisoner_interaction_claims_casus_bellis_modifier_loss = {
			WHO = scope:actor
			PRISONER = scope:secondary_actor
		}
		### AI sends less if the receiver is of different culture with the prisoner.
		gm1_transfer_prisoner_interaction_prisoner_faith_modifier = {
			WHO = scope:actor
			PRISONER = scope:secondary_actor
		}
		### AI sends less if the prisoner is their vassal and without imprisonment reason.
		gm1_transfer_prisoner_interaction_prisoner_realm_modifier = {
			WHO = scope:actor
			PRISONER = scope:secondary_actor
		}
		### AI sends based on personal relations with the prisoner.
		gm1_offer_prisoner_interaction_prisoner_relation_modifier = {
			WHO = scope:actor
			PRISONER = scope:secondary_actor
		}
		### Does the AI think this trade is worth it compared to a straight up ransom?
		modifier = {
			exists = scope:secondary_actor
			add = {
				value = 0
				#### Gold Option
				add = {
					if = {
						limit = { scope:very_high_gold ?= yes }
						value = scope:secondary_actor.highly_increased_barter_cost_value
					}
					else_if = {
						limit = { scope:medium_gold ?= yes }
						value = scope:secondary_actor.slightly_increased_barter_cost_value
					}
					else_if = {
						limit = { scope:high_gold ?= yes }
						value = scope:secondary_actor.increased_barter_cost_value
					}
					else_if = {
						limit = { scope:gold ?= yes }
						value = scope:secondary_actor.barter_cost_value
					}
					else_if = {
						limit = {
							OR = {
								scope:very_high_current_gold ?= yes
								scope:high_current_gold ?= yes
								scope:medium_current_gold ?= yes
								scope:current_gold ?= yes
							}
						} 
						value = scope:recipient.current_gold_value
					}
				}
				### Hook Option
				add = {
					if = {
						limit = { scope:strong_hook ?= yes }
						value = scope:recipient.golden_obligation_value
						multiply = 2
					}
					else_if = {
						limit = { scope:favor ?= yes }
						value = scope:recipient.golden_obligation_value
					}
				}
				divide = {
					value = interaction_actor_prisoner_value
					min = 1
				}
				subtract = 1
				multiply = 100
				max = 100
				min = -100
			}
		}
	}
}

demand_prisoner_interaction = {
	common_interaction = no
	category = interaction_category_diplomacy
	icon = prison

	popup_on_receive = yes
	pause_on_receive = yes

	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}

	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	ai_maybe = yes
	ai_min_reply_days = 4
	ai_max_reply_days = 9

	desc = demand_prisoner_interaction_desc
	notification_text = DEMAND_PRISONER_INTERACTION_PROPOSAL_NOTIFICATION_TEXT
	prompt = DEMAND_PRISONER_INTERACTION_SELECT_TARGET

	cooldown_against_recipient = { years = 3 }

	is_shown = {
		# Cannot target oneself.
		NOT = { scope:recipient = scope:actor }
		# Only significant rulers are allowed to use this interaction.
		scope:actor.highest_held_title_tier > tier_barony
		scope:recipient.highest_held_title_tier > tier_barony
	}

	is_valid_showing_failures_only = {
		# Theocratic Governments are not allowed.
		NOT = { scope:actor = { government_has_flag = government_is_theocracy } }
		NOT = { scope:recipient = { government_has_flag = government_is_theocracy } }

		# Recipient
		## Must be available.
		## Must have prisoners.
		## Must not have any prisoners already under interaction.
		scope:recipient = {
			is_busy_in_events_localised = yes
			
			### Specialized Redirected Demand Imprisonment
			trigger_if = {
				limit = { is_imprisoned = no }
				has_prisoners = yes
			}
		}
		
		# Actor
		## Must be available.
		## Must not be imprisoned.
		## Must not be at war with the Recipient.
		scope:actor = { 
			is_busy_in_events_localised = yes
			is_imprisoned = no 
			NOT = { is_at_war_with = scope:recipient }
		}

		# AI
		## Stop AI from spamming already denied prisoner.
		trigger_if = {
			limit = {
				scope:actor = { is_ai = yes }
				exists = scope:secondary_recipient
			}
			scope:secondary_recipient = {
				NOT = { has_character_flag = demanded_prisoner_already }
			}
		}
	}

	can_be_picked = {
		gm1_valid_for_transfer_prisoner_interaction_trigger = yes
	}

	auto_accept = {
		trigger_if = {
			limit = { scope:actor = { is_ai = no } }
			OR = {
				## Sender has no choice but to accept against a strong hook.
				trigger_if = {
					limit = { scope:hook ?= yes	}
			custom_description = {
				text = "spending_hook"
				subject = scope:actor
				object = scope:recipient
						scope:actor = { has_strong_hook = scope:recipient }
					}
				}
				## Sender has no choice but to accept against their liege.
						scope:recipient = { is_vassal_of = scope:actor }
					}
				}
	}

	can_send = {
		exists = scope:secondary_recipient
		trigger_if = {
			limit = { scope:recipient = { is_ai = no } }
			scope:secondary_recipient = {
				NOT = { has_character_flag = demanded_prisoner_already }
			}
		}
		trigger_if = {
			limit = { scope:actor = { is_ai = yes} }
			scope:secondary_recipient = {
				has_recently_undergone_interaction = no
			}
		}
		custom_description = {
			text = "is_allies_with_target_trigger"
			subject = scope:actor
			object = scope:recipient
			NAND = {
				scope:actor = { is_allied_in_war = scope:recipient }
				scope:recipient = { is_at_war_with = scope:secondary_recipient }
			}
		}
	}
	
	can_be_blocked = {
		## The hook from receiver can counteract, but only if 
		## the sender is not forcing the action through a strong hook.
				custom_description = {
					text = "spending_hook"
			subject = scope:recipient
					object = scope:actor
			scope:recipient = { has_hook = scope:actor }
			NAND = {
				scope:hook ?= yes
				scope:actor = { has_strong_hook = scope:recipient }
			}
		}
	}

	redirect = {
		scope:recipient = {
			if = {
				limit = { is_imprisoned = yes }
				save_scope_as = secondary_recipient
				imprisoner ?= { save_scope_as = recipient }
			}
		}
	}

	populate_recipient_list = {
		scope:recipient = {
			every_prisoner = {
				limit = { 
					NOT = { scope:actor = this }
					gm1_valid_for_transfer_prisoner_interaction_trigger_basic = {
						SENDER = scope:recipient
					}
				}
				add_to_list = characters
			}
		}
	}

	localization_values = {
		VERY_HIGH_BARTER_COST = scope:secondary_recipient.highly_increased_barter_cost_value
		HIGH_BARTER_COST = scope:secondary_recipient.increased_barter_cost_value
		MEDIUM_BARTER_COST = scope:secondary_recipient.slightly_increased_barter_cost_value
		BARTER_COST = scope:secondary_recipient.barter_cost_value
		CURRENT_GOLD = scope:actor.gold
	}

	send_option = {
		is_shown = {
			OR = {
				scope:actor = { is_ai = yes }
				AND = {
					scope:actor = { is_ai = no }
					scope:recipient = {
						NOT = { is_vassal_of = scope:actor }
					}	
				}
			}
			AND = {
				exists = scope:secondary_recipient
				scope:secondary_recipient ?= { 
					is_at_war_with = scope:actor
				}
				scope:recipient = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp1_pillage_legacy_3	}
				}
				scope:actor = {
					gold >= scope:secondary_recipient.highly_increased_barter_cost_value
				}
			}
		}

		is_valid = {
			trigger_if = {
				limit = { scope:hook ?= yes }
				scope:actor = {
					NOT = { has_usable_hook = scope:recipient } 
				}
			}
		}

		flag = very_high_gold
		localization = "BARTER_OPTION_VERY_HIGH_GOLD"
	}

	send_option = {
		is_shown = {
			OR = {
				scope:actor = { is_ai = yes }
				AND = {
					scope:actor = { is_ai = no }
					scope:recipient = {
						NOT = { is_vassal_of = scope:actor }
					}	
				}
			}
			AND = {
				exists = scope:secondary_recipient
				scope:secondary_recipient ?= { 
					is_at_war_with = scope:actor
				}
				scope:recipient = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp1_pillage_legacy_3	}
				}
				scope:actor = {
					gold < scope:secondary_recipient.highly_increased_barter_cost_value
					gold >= 1
				}
			}
		}

		is_valid = {
			trigger_if = {
				limit = { scope:hook ?= yes }
				scope:actor = { 
					NOT = { has_usable_hook = scope:recipient } 
				}
			}
		}

		flag = very_high_current_gold
		localization = "BARTER_OPTION_VERY_HIGH_GOLD_CURRENT"
	}

	send_option = {
		is_shown = {
			OR = {
				scope:actor = { is_ai = yes }
				AND = {
					scope:actor = { is_ai = no }
					scope:recipient = {
						NOT = { is_vassal_of = scope:actor }
					}	
				}
			}
			AND = {
				exists = scope:secondary_recipient
				scope:secondary_recipient ?= { 
					is_at_war_with = scope:actor
				}
				scope:recipient = {
					OR = {
						is_lowborn = yes
						NOT = { dynasty = {	has_dynasty_perk = fp1_pillage_legacy_3	} }
					}
				}
				scope:actor = {
					gold >= scope:secondary_recipient.increased_barter_cost_value
				}
			}
		}

		is_valid = {
			trigger_if = {
				limit = { scope:hook ?= yes }
				scope:actor = { 
					NOT = { has_usable_hook = scope:recipient } 
				}
			}
		}

		flag = high_gold
		localization = "BARTER_OPTION_HIGH_GOLD"
	}

	send_option = {
		is_shown = {
			OR = {
				scope:actor = { is_ai = yes }
				AND = {
					scope:actor = { is_ai = no }
					scope:recipient = {
						NOT = { is_vassal_of = scope:actor }
					}	
				}
			}
			AND = {
				exists = scope:secondary_recipient
				scope:secondary_recipient ?= { 
					is_at_war_with = scope:actor
				}
				scope:recipient = {
					OR = {
						is_lowborn = yes
						NOT = { dynasty = {	has_dynasty_perk = fp1_pillage_legacy_3	} }
					}
				}
				scope:actor = {
					gold < scope:secondary_recipient.increased_barter_cost_value
					gold >= 1
				}
			}
		}

		is_valid = {
			trigger_if = {
				limit = { scope:hook ?= yes }
				scope:actor = { 
					NOT = { has_usable_hook = scope:recipient } 
				}
			}
		}

		flag = high_current_gold
		localization = "BARTER_OPTION_HIGH_GOLD_CURRENT"
	}

	send_option = {
		is_shown = {
			OR = {
				scope:actor = { is_ai = yes }
				AND = {
					scope:actor = { is_ai = no }
					scope:recipient = {
						NOT = { is_vassal_of = scope:actor }
					}	
				}
			}
			AND = {
				exists = scope:secondary_recipient
				scope:secondary_recipient ?= { 
					NOT = { is_at_war_with = scope:actor }
				}
				scope:recipient = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp1_pillage_legacy_3	}
				}
				scope:actor = {
					gold >= scope:secondary_recipient.slightly_increased_barter_cost_value
				}
			}
		}

		is_valid = {
			trigger_if = {
				limit = { scope:hook ?= yes }
				scope:actor = { 
					NOT = { has_usable_hook = scope:recipient } 
				}
			}
		}

		flag = medium_gold
		localization = "BARTER_OPTION_MEDIUM_GOLD"
	}

	send_option = {
		is_shown = {
			OR = {
				scope:actor = { is_ai = yes }
				AND = {
					scope:actor = { is_ai = no }
					scope:recipient = {
						NOT = { is_vassal_of = scope:actor }
					}	
				}
			}
			AND = {
				exists = scope:secondary_recipient
				scope:secondary_recipient ?= { 
					NOT = { is_at_war_with = scope:actor }
				}
				scope:recipient = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp1_pillage_legacy_3	}
				}
				scope:actor ?= {
					gold < scope:secondary_recipient.slightly_increased_barter_cost_value
					gold >= 1
				}
			}
		}

		is_valid = {
			trigger_if = {
				limit = { scope:hook ?= yes }
				scope:actor = { 
					NOT = { has_usable_hook = scope:recipient } 
				}
			}
		}

		flag = medium_current_gold
		localization = "BARTER_OPTION_MEDIUM_GOLD_CURRENT"
	}

	send_option = {
		is_shown = {
			OR = {
				scope:actor = { is_ai = yes }
				AND = {
					scope:actor = { is_ai = no }
					scope:recipient = {
						NOT = { is_vassal_of = scope:actor }
					}	
				}
			}
			AND = {
				exists = scope:secondary_recipient
				scope:secondary_recipient ?= { 
					NOT = { is_at_war_with = scope:actor }
				}
				scope:recipient = {
					OR = {
						is_lowborn = yes
						NOT = { dynasty = {	has_dynasty_perk = fp1_pillage_legacy_3	} }
					}
				}
				scope:actor = {
					gold >= scope:secondary_recipient.barter_cost_value
				}
			}
		}

		is_valid = {
			trigger_if = {
				limit = { scope:hook ?= yes }
				scope:actor = { 
					NOT = { has_usable_hook = scope:recipient } 
				}
			}
		}

		flag = gold
		localization = "BARTER_OPTION_GOLD"
	}

	send_option = {
		is_shown = {
			OR = {
				scope:actor = { is_ai = yes }
				AND = {
					scope:actor = { is_ai = no }
					scope:recipient = {
						NOT = { is_vassal_of = scope:actor }
					}	
				}
			}
			AND = {
				exists = scope:secondary_recipient
				scope:secondary_recipient ?= { 
					NOT = { is_at_war_with = scope:actor }
				}
				scope:recipient = {
					OR = {
						is_lowborn = yes
						NOT = { dynasty = {	has_dynasty_perk = fp1_pillage_legacy_3	} }
					}
				}
				scope:actor = {
					gold < scope:secondary_recipient.barter_cost_value
					gold >= 1
				}
			}
		}

		is_valid = {
			trigger_if = {
				limit = { scope:hook ?= yes }
				scope:actor = { 
					NOT = { has_usable_hook = scope:recipient } 
				}
			}
		}

		flag = current_gold
		localization = "BARTER_OPTION_GOLD_CURRENT"
	}

	send_option = {
		is_shown = {
			OR = {
				scope:actor = { is_ai = yes }
				AND = {
					scope:actor = { is_ai = no }
					scope:recipient = {
						NOT = { is_vassal_of = scope:actor }
					}	
				}
			}
			AND = {
				exists = scope:secondary_recipient
				scope:secondary_recipient ?= {
					OR = {
						is_at_war_with = scope:actor
						any_held_title = {
							tier >= tier_kingdom
							custom_tooltip = { 
								# Workaround just to mute this specific localization error. 
								# Why does it have to be designed this way?
								scope:actor = { has_strong_claim_on = prev }
								text = DEBUG_COLON
							}
						}
					}
				}
				scope:actor = {
					NOT = { has_usable_hook = scope:recipient }
				}
			}
		}

		is_valid = {
			## Modifier is already tapped out at this point.
			custom_tooltip = {
				NOR = {
					scope:very_high_gold ?= yes
					scope:medium_gold ?= yes
					scope:high_gold ?= yes
					scope:gold ?= yes
				}
				text = "maximum_opinion_reached"
			}
			scope:recipient = {
				can_add_hook = {
					target = scope:actor
					type = loyalty_hook
				}
			}
		}

		flag = strong_hook
		localization = "BARTER_OPTION_OWE_FAVOR"
	}

	send_option = {
		is_shown = {
			OR = {
				scope:actor = { is_ai = yes }
				AND = {
					scope:actor = { is_ai = no }
					scope:recipient = {
						NOT = { is_vassal_of = scope:actor }
					}	
				}
			}
			AND = {
				exists = scope:secondary_recipient
				scope:secondary_recipient ?= {
					NOR = {
						is_at_war_with = scope:actor
						any_held_title = {
							tier >= tier_kingdom
							custom_tooltip = { 
								# Workaround just to mute this specific localization error. 
								# Why does it have to be designed this way?
								scope:actor = { has_strong_claim_on = prev }
								text = DEBUG_COLON
							}
						}
					}	
				}
				scope:actor = {
					NOT = { has_usable_hook = scope:recipient }
				}
			}
		}

		is_valid = {
			## Modifier is already tapped out at this point.
			custom_tooltip = {
				NOR = {
					scope:very_high_gold ?= yes
					scope:medium_gold ?= yes
					scope:high_gold ?= yes
					scope:gold ?= yes
				}
				text = "maximum_opinion_reached"
			}
			scope:recipient = {
				can_add_hook = {
					target = scope:actor
					type = favor_hook
				}
			}
		}

		flag = favor
		localization = "BARTER_OPTION_OWE_FAVOR"
	}

	## Hook can be used to force accept demand for a prisoner.
	send_option = {
		is_shown = {
			exists = scope:secondary_recipient
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}

		flag = hook
		localization = "GENERIC_SPEND_A_HOOK"
	}

	send_options_exclusive = no

	on_send = {
		hidden_effect = {
			scope:secondary_recipient = {
				add_character_flag = {
					flag = under_transfer_prisoner_interaction
					months = 3
				}
				if = {
					limit = { scope:recipient = { is_ai = no } }
					add_character_flag = {
						flag = demanded_prisoner_already
						years = 3
					}
				}
			}	
		}
	}

	on_accept = {	
		if = {
			limit = { debug_only = yes }
			debug_log = "GM1 - Initiated Demand Prisoner Interaction"
		}

		transfer_prisoner_interaction_effect = {
			PRISONER = scope:secondary_recipient
			SENDER = scope:recipient
			RECEIVER = scope:actor
		}

		## Notification Event.
		scope:actor = {
			trigger_event = gm1_interaction.0026
		}

		transfer_prisoner_interaction_payment_effect = {
			PRISONER = scope:secondary_recipient
			SENDER = scope:recipient
			RECEIVER = scope:actor
		}

		## Clan Unity.
		scope:actor = {
			if = {
				limit = {
					government_has_flag = government_is_clan
					house = scope:recipient.house
				}
				add_clan_unity_interaction_effect = {
					CHARACTER = scope:actor
					TARGET = scope:recipient
					VALUE = medium_unity_loss
					DESC = clan_unity_hostage.desc
					REVERSE_NON_HOUSE_TARGET = no
				}
			}
		}
	}

	on_decline = {	
		## Notification Event.
		scope:actor = {
			trigger_event = gm1_interaction.0022 
		}

		## Prevent concurrencies
		scope:secondary_recipient = {
			if = {
				limit = { has_character_flag = under_transfer_prisoner_interaction }
				remove_character_flag = under_transfer_prisoner_interaction
			}
		}
	}

	on_blocked_effect = {
		scope:recipient = {
			remove_hook = {
				target = scope:actor
			}
		}
	}

	on_auto_accept = {
		## This is moved within on_accept since this
		## is pretty much useless for showing tooltip.
		## { scope:hook = yes }
	}

	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = liege
	}

	ai_frequency = 6

	ai_potential = { 
		highest_held_title_tier >= tier_county 
		gold >= 25
	}

	ai_accept = {
		base = 0

		## Sender's Personality
		gm1_demand_prisoner_interaction_personality_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
			PRISONER = scope:secondary_recipient
		}

		## Modifiers towards the initiator.
		### How much does the sender think about the receiver? (Halved)
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		### Sender accepts more if they are below the receiver.
		gm1_transfer_prisoner_interaction_tier_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Sender accepts more if they are scared of the receiver.
		gm1_transfer_prisoner_interaction_relative_strength_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Sender accepts less if they are not tribal while the receiver is.
		gm1_transfer_prisoner_interaction_government_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Sender accepts based on diplomatic relations with the receiver.
		gm1_transfer_prisoner_interaction_realm_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Sender accepts less if different culture with the receiver.
		gm1_transfer_prisoner_interaction_culture_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Sender accepts less if different faith with the receiver.
		gm1_transfer_prisoner_interaction_faith_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Sender accepts based on personal relations with the receover.
		gm1_transfer_prisoner_interaction_relation_modifier = {
			WHO = scope:recipient
			TARGET = scope:actor
		}
		### Sender accepts based on receiver dread levels.
		gm1_transfer_prisoner_interaction_dread_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
		}
		### Sender accepts based on perks.
		gm1_transfer_prisoner_interaction_perk_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
			PRISONER = scope:secondary_recipient
		}
		### Sender accepts based on traits.
		gm1_transfer_prisoner_interaction_trait_modifier = {
			WHO = scope:actor
			TARGET = scope:recipient
		}

		## Modifiers towards the Prisoner.
		### How much does the sender think about the prisoner? (Halved)
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:secondary_recipient
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		### Sender will decline if at war with the prisoner.
		modifier = {
			scope:recipient = {  
				is_at_war_with = scope:secondary_recipient
			}
			add = -500
			desc = INTERACTION_AI_PRISONER_REASON_WAR_AGAINST
		}
		### Sender is scared to give away powerful prisoners.
		gm1_transfer_prisoner_interaction_prisoner_relative_strength_modifier = {
			WHO = scope:recipient
			PRISONER = scope:secondary_recipient
		}
		### Sender accepts less if they have claims against the prisoner.
		gm1_transfer_prisoner_interaction_claims_casus_bellis_modifier_loss = {
			WHO = scope:recipient
			PRISONER = scope:secondary_recipient
		}
		### Sender accepts less if different culture with the prisoner.
		gm1_transfer_prisoner_interaction_prisoner_faith_modifier = {
			WHO = scope:recipient
			PRISONER = scope:secondary_recipient
		}
		### Sender accepts less if the prisoner is their vassal and without imprisonment reason.
		gm1_transfer_prisoner_interaction_prisoner_realm_modifier = {
			WHO = scope:recipient
			PRISONER = scope:secondary_recipient
		}
		### Sender accepts based on personal relations with the prisoner.
		gm1_demand_prisoner_interaction_prisoner_relation_modifier = {
			WHO = scope:recipient
			PRISONER = scope:secondary_recipient
		}
		### Does the sender think this trade is worth it compared to a straight up ransom?
		modifier = {
			exists = scope:secondary_recipient
			add = {
				value = 0
				#### Gold Option
				add = {
					if = {
						limit = { scope:very_high_gold ?= yes }
						value = scope:secondary_recipient.highly_increased_barter_cost_value
					}
					else_if = {
						limit = { scope:medium_gold ?= yes }
						value = scope:secondary_recipient.slightly_increased_barter_cost_value
					}
					else_if = {
						limit = { scope:high_gold ?= yes }
						value = scope:secondary_recipient.increased_barter_cost_value
					}
					else_if = {
						limit = { scope:gold ?= yes }
						value = scope:secondary_recipient.barter_cost_value
					}
					else_if = {
						limit = {
							OR = {
								scope:very_high_current_gold ?= yes
								scope:high_current_gold ?= yes
								scope:medium_current_gold ?= yes
								scope:current_gold ?= yes
							}
						} 
						value = scope:actor.current_gold_value
					}
				}
				### Hook Option
				add = {
					if = {
						limit = { scope:strong_hook ?= yes }
						value = scope:actor.golden_obligation_value
						multiply = 2
					}
					else_if = {
						limit = { scope:favor ?= yes }
						value = scope:actor.golden_obligation_value
					}
				}
				divide = {
					value = interaction_recipient_prisoner_value
					min = 1
				}
				subtract = 1
				multiply = 100
				max = 100
				min = -100
			}
			desc = INTERACTION_AI_PRISONER_REASON_VALUE_RECIPIENT
		}
	}

	ai_will_do = {
		base = 0

		## They are at war with the prisoner.
		modifier = {
			exists = scope:secondary_recipient
			is_at_war_with = scope:secondary_recipient
			add = 100
		}

		## If you're wondering why this section is bare...
		##
		## The AI, even with prisoners having strong claims 
		## against their major titles, are dumb as fuck.
		## The Ai has no idea what to do with the prisoner.
		##
		## They won't:
		##  1. Strip prisoner claims.
		##  2. Execute the prisoner.
		##
		## On really RARE occasions though they WILL do these.
		## IF the stars and planets align in their favor-
		## as well as their mamas and papas bless them as
		## their golden child.
		##
		## But most likely they will:
		##  1. Set them free for virtually nothing. :)
		##  2. Ransom the prisoner for less their worth.
		##
		## Pls PDX improve base AI :)
	}
}